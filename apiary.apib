FORMAT: 1A
HOST: http://gateway.dnajobs.cz/

# Hiri Admin API

Hiri Admin API provides Hiri Admin functionality.
Hiri API is split into 3 separate parts: General Api, Admin Api and Testing API.

### API consumers

API consumers are called "Clients" and they must be registered. Each client
is given an id, name and secret key to access the API. The API can be accessed
by using HTTP Basic Authentication with your username and secret.

Each client is only served the data which belong to it. That means you
can't access other client's resources.

### Data formats

#### Response formats
Hiri API Gateway uses HATEOAS technology and its responses are in
application/hal+json format.
See http://stateless.co/hal_specification.html.

#### Errors
Any errors are described according to HTTP Problem draft, formatted as application/problem+json.
See https://tools.ietf.org/html/draft-nottingham-http-problem-07.

#### Dates
All dates are served in ISO 8601 format in UTC timezone.
ISO 8601 date formats in any timezone are accepted.


# Group Application States

## Company's Application States Collection [/api/companies/{company_id}/application-states?limit={limit}&page={page}&sort={sort}]

+ Parameters
    + limit (number, optional) - Limits number of candidates returned in the request
    + page (number, optional) - Distance from beginning of the array of available candidates
    + sort (string, optional) - Sorts the result in the given order. The format for sort is "column+ASC,column+DESC"
    + company_id (number, required) - ID of the Company

### List Company's Application States [GET]

Retrieves list of all Application States belonging to Company.

+ Response 200 (application/hal+json)

        {
            "_embedded": {
                "application_states": [
                    {
                        "id": 1,
                        "order": 10,
                        "created": "2016-02-06T21:17:17+0100",
                        "_links": {
                            "self": {
                                "href": "\/api\/application-states\/1"
                            }
                        },
                        "_embedded": {
                            "title": {
                                "en": "New",
                                "cs": "Nov\u00fd"
                            }
                        }
                    },
                    {
                        "id": 2,
                        "order": 20,
                        "created": "2016-02-06T21:17:17+0100",
                        "_links": {
                            "self": {
                                "href": "\/api\/application-states\/2"
                            }
                        },
                        "_embedded": {
                            "title": {
                                "en": "Active",
                                "cs": "Aktivn\u00ed"
                            }
                        }
                    },
                    {
                        "id": 3,
                        "order": 30,
                        "created": "2016-02-06T21:17:17+0100",
                        "_links": {
                            "self": {
                                "href": "\/api\/application-states\/3"
                            }
                        },
                        "_embedded": {
                            "title": {
                                "en": "Interview",
                                "cs": "Pohovor"
                            }
                        }
                    },
                    {
                        "id": 4,
                        "order": 40,
                        "created": "2016-02-06T21:17:17+0100",
                        "_links": {
                            "self": {
                                "href": "\/api\/application-states\/4"
                            }
                        },
                        "_embedded": {
                            "title": {
                                "en": "Accepted",
                                "cs": "P\u0159ijat\u00fd"
                            }
                        }
                    },
                    {
                        "id": 5,
                        "order": 50,
                        "created": "2016-02-06T21:17:17+0100",
                        "_links": {
                            "self": {
                                "href": "\/api\/application-states\/5"
                            }
                        },
                        "_embedded": {
                            "title": {
                                "en": "Refused",
                                "cs": "Odm\u00edtnut\u00fd"
                            }
                        }
                    }
                ]
            }
        }

### Create an Application State [POST]

Creates an Application State.

+ Request (application/json)

    + Attributes
        + todo (boolean, required) - Will be added in the future

    + Body

            {
                "todo": true
            }

+ Response 201 (application/hal+json)

        {
            "todo": true
        }


## Application State [/api/application-states/{id}]

+ Attributes
    + id (number, required) - ID of the Application State.
    + order (number, required) - Order of the Application State among the Company.
    + embedded.title (object, required) - Localized title of the Application State.
    + embedded.company (object, required) - Company to which the Application State belongs.

+ Parameters
    + id (number, required) - ID of the Application State.

### Retrieve an Application State [GET]

Retrieves Application State with given ID.

+ Response 200 (application/hal+json)

        {
            "todo": true
        }

### Update an Application State [PUT]

Updates an Application State with given ID.

+ Request (application/json)

    + Attributes
        + todo (boolean, required) - Will be added in the future

    + Body

            {"todo": true}

+ Response 200 (application/hal+json)

        {
            "todo": true
        }

### Delete an Application State [DELETE]

Deleted an Application State with given ID.

+ Request (application/json)

    + Attributes
        + todo (boolean, required) - Will be added in the future
        + transfer_to_id (number, required) - ID of the Application State to which Candidates will be Transfered.

    + Body

            {"todo": true, "transfer_to_id": 1}

+ Response 200 (application/hal+json)

        {
            "ok": true
        }



# Group Application Views

## Application Views Collection [/api/application-views?limit={limit}&page={page}&sort={sort}]

+ Parameters
    + limit (number, optional) - Limits number of candidates returned in the request
    + page (number, optional) - Distance from beginning of the array of available candidates
    + sort (string, optional) - Sorts the result in the given order. The format for sort is "column+ASC,column+DESC"

### List Application Views [GET]

Lists all Application Views.

+ Response 200 (application/hal+json)

        {
            "_embedded": {
                "application_views": [
                    {
                        "id": 1,
                        "created": "2016-05-13T13:24:12+0200",
                        "_links": {
                            "self": {
                                "href": "\/api\/application-views\/1"
                            }
                        },
                        "_embedded": {
                            "application": {
                                "id": 1,
                                "created": "2016-05-13T13:24:12+0200",
                                "state": "new",
                                "email": "john.doe@example.com",
                                "name": "John Doe",
                                "price": 100,
                                "why": "I wanna be the very best",
                                "_links": {
                                    "self": {
                                        "href": "\/api\/applications\/1"
                                    }
                                }
                            },
                            "user": {
                                "id": 1,
                                "name": "John Doe",
                                "email": "john.doe@example.com",
                                "created": "2016-05-13T13:24:12+0200",
                                "_links": {
                                    "self": {
                                        "href": "\/api\/users\/1"
                                    },
                                    "language": {
                                        "href": "\/api\/languages\/cs"
                                    }
                                },
                                "_embedded": {
                                    "language": {
                                        "id": "cs",
                                        "_links": {
                                            "self": {
                                                "href": "\/api\/languages\/cs"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    {
                        "id": 2,
                        "created": "2016-05-13T13:24:12+0200",
                        "_links": {
                            "self": {
                                "href": "\/api\/application-views\/2"
                            }
                        },
                        "_embedded": {
                            "application": {
                                "id": 2,
                                "created": "2016-05-13T13:24:12+0200",
                                "state": "new",
                                "email": "john.doe@example.com",
                                "name": "John Doe",
                                "price": 100,
                                "why": "I wanna be the very best",
                                "_links": {
                                    "self": {
                                        "href": "\/api\/applications\/2"
                                    }
                                }
                            },
                            "user": {
                                "id": 2,
                                "name": "John Doe",
                                "email": "john.doe@example.com",
                                "created": "2016-05-13T13:24:12+0200",
                                "_links": {
                                    "self": {
                                        "href": "\/api\/users\/2"
                                    },
                                    "language": {
                                        "href": "\/api\/languages\/cs"
                                    }
                                },
                                "_embedded": {
                                    "language": {
                                        "id": "cs",
                                        "_links": {
                                            "self": {
                                                "href": "\/api\/languages\/cs"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                ]
            }
        }

### Create Application View [POST]

Creates Application View with given parameters.

+ Request (application/json)

    + Attributes
        + application (number, required) - ID of the viewed Application

    + Body

            {
                "application": 1
            }

+ Response 201 (application/hal+json)

        {
            "ok": true,
            "inserted": {
                "id": 3,
                "created": "2016-05-13T13:24:28+0200",
                "_links": {
                    "self": {
                        "href": "\/api\/application-views\/3"
                    }
                },
                "_embedded": {
                    "application": {
                        "id": 1,
                        "created": "2016-05-13T13:24:27+0200",
                        "state": "new",
                        "email": "john.doe@example.com",
                        "name": "John Doe",
                        "price": 100,
                        "why": "I wanna be the very best",
                        "_links": {
                            "self": {
                                "href": "\/api\/applications\/1"
                            }
                        }
                    },
                    "user": {
                        "id": 4,
                        "name": "John Doe",
                        "email": "john.doe@example.com",
                        "created": "2016-05-13T13:24:27+0200",
                        "_links": {
                            "self": {
                                "href": "\/api\/users\/4"
                            },
                            "language": {
                                "href": "\/api\/languages\/cs"
                            }
                        },
                        "_embedded": {
                            "language": {
                                "id": "cs",
                                "_links": {
                                    "self": {
                                        "href": "\/api\/languages\/cs"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

## Application's Application Views Collection [/api/applications/{application_id}/application-views?limit={limit}&page={page}&sort={sort}]

+ Parameters
    + application_id (number, required) - ID of the Application
    + limit (number, optional) - Limits number of candidates returned in the request
    + page (number, optional) - Distance from beginning of the array of available candidates
    + sort (string, optional) - Sorts the result in the given order. The format for sort is "column+ASC,column+DESC"

### List Application's Application Views [GET]

Lists all Application Views belonging to given Application.

+ Response 200 (application/hal+json)

        {
            "_embedded": {
                "application_views": [
                    {
                        "id": 1,
                        "created": "2016-05-13T13:29:15+0200",
                        "_links": {
                            "self": {
                                "href": "\/api\/application-views\/1"
                            }
                        },
                        "_embedded": {
                            "application": {
                                "id": 1,
                                "created": "2016-05-13T13:29:15+0200",
                                "state": "new",
                                "email": "john.doe@example.com",
                                "name": "John Doe",
                                "price": 100,
                                "why": "I wanna be the very best",
                                "_links": {
                                    "self": {
                                        "href": "\/api\/applications\/1"
                                    }
                                }
                            },
                            "user": {
                                "id": 1,
                                "name": "John Doe",
                                "email": "john.doe@example.com",
                                "created": "2016-05-13T13:29:15+0200",
                                "_links": {
                                    "self": {
                                        "href": "\/api\/users\/1"
                                    },
                                    "language": {
                                        "href": "\/api\/languages\/cs"
                                    }
                                },
                                "_embedded": {
                                    "language": {
                                        "id": "cs",
                                        "_links": {
                                            "self": {
                                                "href": "\/api\/languages\/cs"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                ]
            }
        }

## Application View [/api/application-views/{id}]

+ Parameters
    + id (number, required) - ID of the Application View

+ Attributes
    + id (number, required) - ID of the Application View
    + created (string, required) - Date when the View was created.
    + embedded.application (object, required) - The Application being viewed - the viewee
    + embedded.user (object, required) - The User viewing the Application - the viewer

### Retrieve Application View [GET]

Retrieves Application View with given ID.

+ Response 200 (applicaiton/hal+json)

        {
            "id": 1,
            "created": "2016-05-13T13:25:26+0200",
            "_links": {
                "self": {
                    "href": "\/api\/application-views\/1"
                }
            },
            "_embedded": {
                "application": {
                    "id": 1,
                    "created": "2016-05-13T13:25:26+0200",
                    "state": "new",
                    "email": "john.doe@example.com",
                    "name": "John Doe",
                    "price": 100,
                    "why": "I wanna be the very best",
                    "_links": {
                        "self": {
                            "href": "\/api\/applications\/1"
                        }
                    }
                },
                "user": {
                    "id": 1,
                    "name": "John Doe",
                    "email": "john.doe@example.com",
                    "created": "2016-05-13T13:25:26+0200",
                    "_links": {
                        "self": {
                            "href": "\/api\/users\/1"
                        },
                        "language": {
                            "href": "\/api\/languages\/cs"
                        }
                    },
                    "_embedded": {
                        "language": {
                            "id": "cs",
                            "_links": {
                                "self": {
                                    "href": "\/api\/languages\/cs"
                                }
                            }
                        }
                    }
                }
            }
        }

### Delete Application View [DELETE]

Deletes Application View with given ID.

+ Response 200 (application/hal+json)

        {"ok": true}



# Group Candidates

## Candidates Collection [/api/candidates?limit={limit}&page={page}&hidden={hidden}&sort={sort}&state={state}]

+ Parameters
    + limit (number, optional) - Limits number of candidates returned in the request
    + page (number, optional) - Distance from beginning of the array of available candidates
    + hidden (boolean, optional) - If set to true, returns also hidden candidates    
    + sort (string, optional) - Sorts the result in the given order. The format for sort is "column+ASC,column+DESC"
    + state (string, optional) - Filters candidates by their state and returns only those with the given state, which can be "completed", "in_progress" or "inactive"

### List Candidates [GET]

Retrieves a list of all Candidates.

+ Response 200 (application/hal+json)

        {
            "page": 2,
            "limit": 1,
            "pages": 3,
            "total": 3,
            "_links": {
                "self": {
                    "href": "\/api\/candidates?page=2&limit=1"
                },
                "first": {
                    "href": "\/api\/candidates?page=1&limit=1"
                },
                "last": {
                    "href": "\/api\/candidates?page=3&limit=1"
                },
                "next": {
                    "href": "\/api\/candidates?page=3&limit=1"
                },
                "previous": {
                    "href": "\/api\/candidates?page=1&limit=1"
                }
            },
            "_embedded": {
                "candidates": [
                    {
                        "id": 1,
                        "created": "2015-10-15T12:04:39+0200",
                        "name": "John Doe",
                        "email": "john.doe@example.com",
                        "note": "Note",
                        "hash": "aaa-aaa-aaa",
                        "avatar": 2,
                        "_links": {
                            "self": {
                                "href": "\/api\/candidates\/2"
                            },
                            "job": {
                                "href": "\/api\/jobs\/1"
                            }
                        },
                        "_embedded": {
                            "number_of_tests": 9,
                            "number_of_completed_tests": 4,
                            "last_completed_test_date": "2015-10-15T12:04:39+0200",
                            "state": "completed"
                        }
                    },
                    {
                        "id": 2,
                        "created": "2013-10-15T12:04:39+0200",
                        "name": "Robert Carter",
                        "email": "robert.carter@example.com",
                        "note": "Some note",
                        "hash": "aaa-aaa-aaa",
                        "avatar": 1,
                        "_links": {
                            "self": {
                                "href": "\/api\/candidates\/2"
                            },
                            "job": {
                                "href": "\/api\/jobs\/1"
                            }
                        },
                        "_embedded": {
                            "number_of_tests": 18,
                            "number_of_completed_tests": 14,
                            "last_completed_test_date": "2015-08-15T12:04:39+0200",
                            "state": "completed"
                        }
                    },
                    {
                        "id": 3,
                        "created": "2014-09-15T12:04:39+0200",
                        "name": "Nicholas Dean",
                        "email": "nicholas.dean@example.com",
                        "note": "Some note",
                        "hash": "aaa-aaa-aaa",
                        "avatar": 3,
                        "_links": {
                            "self": {
                                "href": "\/api\/candidates\/2"
                            },
                            "job": {
                                "href": "\/api\/jobs\/1"
                            }
                        },
                        "_embedded": {
                            "number_of_tests": 11,
                            "number_of_completed_tests": 7,
                            "last_completed_test_date": "2015-04-15T12:04:39+0200",
                            "state": "completed"
                        }
                    }
                ],
                "number_of_candidates": 1,
                "number_of_completed_candidates": 0,
                "number_of_candidatesInProgress": 0,
                "number_of_inactive_candidates": 1
            }
        }


### Create a New Candidate [POST]

Creates a new Candidate for the given Job. You have to provide all parameters.

+ Request (application/json)

        {
            "job": "1",
            "name": "John Doe",
            "email": "john.doe@example.com",
            "note": "I like this one."
        }

+ Response 201 (application/hal+json)

        {
            "ok": true,
            "inserted": {
                "id": 1,
                "created": "2015-12-01T19:25:02+0100",
                "name": "John Doe",
                "email": "john.doe@example.com",
                "note": "I like this one!",
                "hash": "u06-8u4-dwi",
                "avatar": 2,
                "_links": {
                    "self": {
                        "href": "\/api\/candidates\/1"
                    },
                    "job": {
                        "href": "\/api\/jobs\/1"
                    },
                    "company": {
                        "href": "\/api\/companies\/1"
                    }
                },
                "_embedded": {
                    "job": {
                        "id": 1,
                        "created": "2015-12-01T19:25:02+0100",
                        "_links": {
                            "self": {
                                "href": "\/api\/jobs\/1"
                            },
                            "company": {
                                "href": "\/api\/companies\/1"
                            },
                            "candidates": {
                                "href": "\/api\/candidates?job_id=1"
                            }
                        },
                        "_embedded": {
                            "title": [],
                            "description": [],
                            "state": "closed",
                            "number_of_candidates": 1,
                            "number_of_completed_candidates": 1,
                            "number_of_tests": 0
                        }
                    },
                    "company": {
                        "id": 1,
                        "name": "Hiri.cz",
                        "webalized": "hiri-cz",
                        "created": "2015-12-01T19:25:02+0100",
                        "_links": {
                            "self": {
                                "href": "\/api\/companies\/1"
                            },
                            "jobs": {
                                "href": "\/api\/jobs?company_id=1"
                            },
                            "jobs:active": {
                                "href": "\/api\/jobs?company_id=1&active=1"
                            }
                        }
                    },
                    "user": null,
                    "cute_test_fills": [],
                    "testFills": [],
                    "history": [
                        {
                            "op": "created",
                            "date": "2015-12-01T19:25:02+0100"
                        },
                        {
                            "op": "completed"
                        }
                    ],
                    "number_of_tests": 0,
                    "number_of_completed_tests": 0,
                    "last_completed_test_date": null,
                    "state": "completed"
                }
            }
        }

+ Response 400 (application/problem+json)

        {
            "errors": [
                "Job with given ID does not exist.",
                "Invalid email address."
            ],
            "title": "There was a validation error.",
            "type": "https://api.hiri.com/problem/validation_error",
            "status": 400,
            "detail": "You have provided invalid data."
        }

## Company's Candidates Collection [/api/companies/{company_id}/candidates?sort={sort}]

+ Parameters
    + company_id (number, required) - Company's id
    + sort (string, optional) - Sorts the result in the given order. The format for sort is "column+ASC,column+DESC"

### List Company's Candidates [GET]

Retrieves a list of all candidates for the given Company.

+ Response 200 (application/hal+json)

        {
            "_embedded": {
                "candidates": [
                    {
                        "id": 2,
                        "created": "2015-10-15T17:05:08+0200",
                        "name": "John Malcolm",
                        "email": "john.malcolm@example.com",
                        "note": "Note hahaha. NOTE HAHAHA. NOOOOTE hahaha. note HAHAHA. Note hahaha. NOTE HAHAHA. NOOOOTE hahaha. note HAHAHA. Note hahaha. NOTE HAHAHA. NOOOOTE hahaha. note HAHAHA. Note hahaha. NOTE HAHAHA. NOOOOTE hahaha. note HAHAHA. Note hahaha. NOTE HAHAHA. NOOOOTE hahaha. note HAHAHA. Note hahaha. NOTE HAHAHA. NOOOOTE hahaha. note HAHAHA. ",
                        "hash": "aab-aab-aab",
                        "avatar": "4",
                        "_links": {
                            "self": {
                                "href": "\/api\/candidates\/2"
                            },
                            "job": {
                                "href": "\/api\/jobs\/1"
                            }
                        },
                        "_embedded": {
                            "number_of_tests": 4,
                            "number_of_completed_tests": 2,
                            "last_completed_test_date": "2015-10-15T20:05:09+0200",
                            "state": "completed"
                        }
                    },
                    {
                        "id": 1,
                        "created": "2015-10-15T17:05:09+0200",
                        "name": "John Doe",
                        "email": "john.doe@example.com",
                        "note": "Note",
                        "hash": "aaa-aaa-aaa",
                        "avatar": "2",
                        "_links": {
                            "self": {
                                "href": "\/api\/candidates\/1"
                            },
                            "job": {
                                "href": "\/api\/jobs\/1"
                            }
                        },
                        "_embedded": {
                            "number_of_tests": 4,
                            "number_of_completed_tests": 1,
                            "last_completed_test_date": "2015-10-16T10:05:09+0200",
                            "state": "in_progress"
                        }
                    }
                ],
                "number_of_candidates": 2,
                "number_of_completed_candidates": 1,
                "number_of_candidatesInProgress": 1,
                "number_of_inactive_candidates": 0
            }
        }

## Job's Candidates Collection [/api/jobs/{job_id}/candidates?sort={sort}]

+ Parameters
    + job_id (number, required) -Job's id
    + sort (string, optional) - Sorts the result in the given order. The format for sort is "column+ASC,column+DESC"

### List Job's Candidates [GET]

Retrieves a list of all candidates for the given Job.

+ Response 200 (application/hal+json)

        {
            "_embedded": {
                "candidates": [
                    {
                        "id": 2,
                        "created": "2015-10-15T17:05:09+0200",
                        "name": "John Malcolm",
                        "email": "john.malcolm@example.com",
                        "note": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Praesent aliquam nulla id turpis rutrum, nec luctus nisl fringilla. Nam tempus mollis neque, in pulvinar est lobortis sed. Mauris ultricies eu erat feugiat rhoncus. Aliquam erat volutpat. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Vivamus molestie tincidunt massa sed imperdiet. Donec pellentesque, sem vel sagittis feugiat, dolor felis dignissim elit, nec tincidunt turpis enim sit amet quam. Nunc mollis a<br>rcu at diam lacinia, ut eleifend massa dignissim. Nulla luctus dignissim augue vitae maximus. Integer vehicula condimentum metus, in efficitur ligula auctor sed. Pellentesque rutrum est nisl, vitae varius enim volutpat id. Vivamus vestibulum purus et purus tristique efficitur. Nullam eget diam eleifend, condimentum ante ac, cursus libero. Morbi est dolor, euismod vel lobortis in, vulputate vitae tellus. Proin rutrum eget mauris eu finibus. Etiam turpis dui, tincidunt posuere pretium quis, aliquam sed libero. Suspendisse viverra rhoncus dui, at bibendum ex tempor ut. Curabitur volutpat magna lacus, lacinia dapibus ex molestie sed.",
                        "hash": "aab-aab-aab",
                        "avatar": "2",
                        "_links": {
                            "self": {
                                "href": "\/api\/candidates\/2"
                            },
                            "job": {
                                "href": "\/api\/jobs\/1"
                            }
                        },
                        "_embedded": {
                            "number_of_tests": 4,
                            "number_of_completed_tests": 2,
                            "last_completed_test_date": "2015-10-15T20:05:09+0200",
                            "state": "completed"
                        }
                    },
                    {
                        "id": 1,
                        "created": "2015-10-15T17:05:09+0200",
                        "name": "John Doe",
                        "email": "john.doe@example.com",
                        "note": "Note",
                        "hash": "aaa-aaa-aaa",
                        "avatar": "4",
                        "_links": {
                            "self": {
                                "href": "\/api\/candidates\/1"
                            },
                            "job": {
                                "href": "\/api\/jobs\/1"
                            }
                        },
                        "_embedded": {
                            "number_of_tests": 4,
                            "number_of_completed_tests": 1,
                            "last_completed_test_date": "2015-10-16T10:05:09+0200",
                            "state": "in_progress"
                        }
                    }
                ],
                "number_of_candidates": 2,
                "number_of_completed_candidates": 1,
                "number_of_candidatesInProgress": 1,
                "number_of_inactive_candidates": 0
            }
        }

## Candidate [/api/candidates/{id}]

+ Attributes
    + id (number, required) - The unique id of the Candidate
    + created (string, required) - date when the Candidate was created
    + name (string, required) - Full name of the Candidate
    + email (string, required) - Email address of the Candidate
    + note (string, optional) - Note to the candidate made by Company
    + hash (string, required) - Candidate's access hash
    + avatar(string, required) - Link to Candidate's avatar image or random number between 1-4 if Candidate doesn't have an image.
    + psychometrically_interpreted (string, optional) - Date when the Candidate was psychometrically interpreted.
    + embedded.state (string, required) - Candidate's state - "completed" when Candidate completed all tests, "in_progress" when Candidate completed at least one test, "inactive" when candidate hasn't started testing yet.
    + embedded.history (object, required) - Candidate's history. The operations are "invited" for date when the Candidate was invited for testing, "finished" for finished test, "completed" for completing all tests, "reminded" for each candidate reminder, "first-login" for date of Candidate's first login, "applied" for date of Candidate's Application, "moved-to-application-state" for date when Candidate was moved to another Application State, "reclaimed" for date when Candidate was reclaimed by the Company and "contacted" for date when the Candidate was contacted.
    + embedded.company (object, required) - Candidate's company
    + embedded.number_of_tests (number, required) - Number of Candidate's tests
    + embedded.number_of_completed_tests (number, required) - Number of completed tests
    + embedded.last_completed_test_date (string, required) - Date of last completed test
    + embedded.test_fills (array, required) - Collection of Candidate's Knowledge Test Fills
    + embedded.cute_test_fills (array, required) - Collection of Candidate's Cute Test Fill
    + embedded.last_contact (object, optional) - Last contact, can be null.
    
+ Parameters
    + id (number, required) - Candidate id

### Retrieve a Candidate [GET]

Retrieves a Candidate with the given id.

The states are "completed" when the Candidate completed all tests, "in_progress" when the Candidate completed at least one test and "inactive" when the Candidate hasn't started testing yet.

+ Response 200 (application/hal+json)

        {
            "id": 1,
            "created": "2015-12-14T14:01:53+0100",
            "name": "John Doe",
            "email": "john.doe@example.com",
            "note": "Note",
            "hash": "aaa-aaa-aaa",
            "avatar": "4",
            "_links": {
                "self": {
                    "href": "\/api\/candidates\/1"
                },
                "job": {
                    "href": "\/api\/jobs\/1"
                },
                "company": {
                    "href": "\/api\/companies\/1"
                },
                "user": {
                    "href": "\/api\/users\/1"
                }
            },
            "_embedded": {
                "job": {
                    "id": 1,
                    "created": "2015-12-14T14:01:53+0100",
                    "open_from": "2016-01-10T14:39:09+0200",
                    "open_to": "2016-11-28T17:04:52+0100",
                    "can_candidate_use_other_cute_languages": true,
                    "_links": {
                        "self": {
                            "href": "\/api\/jobs\/1"
                        },
                        "company": {
                            "href": "\/api\/companies\/1"
                        },
                        "candidates": {
                            "href": "\/api\/candidates?job_id=1"
                        }
                    },
                    "_embedded": {
                        "title": {
                            "cs": "Hled\u00e1me Node.js developera",
                            "en": "We are looking for a Node.js developer"
                        },
                        "description": {
                            "cs": "Pod\u00edlej se na v\u00fdvoji nov\u00e9ho pracovn\u00edho port\u00e1lu, kter\u00fd zm\u011bn\u00ed \u010desk\u00fd trh s prac\u00ed.",
                            "en": "Help us build a revolutionary job portal!"
                        },
                        "intro": [],
                        "state": "open",
                        "number_of_candidates": 1,
                        "number_of_completed_candidates": 0,
                        "number_of_tests": 4
                    }
                },
                "company": {
                    "id": 1,
                    "name": "Hiri.cz",
                    "webalized": "hiri-cz",
                    "created": "2015-12-14T14:01:53+0100",
                    "_links": {
                        "self": {
                            "href": "\/api\/companies\/1"
                        },
                        "jobs": {
                            "href": "\/api\/jobs?company_id=1"
                        },
                        "jobs:active": {
                            "href": "\/api\/jobs?company_id=1&active=1"
                        }
                    }
                },
                "user": {
                    "id": 1,
                    "name": "John Doe",
                    "email": "john.doe@example.com",
                    "created": "2015-12-14T14:01:53+0100",
                    "_links": {
                        "self": {
                            "href": "\/api\/users\/1"
                        },
                        "companies": {
                            "href": "\/api\/companies?user_id=1"
                        },
                        "language": {
                            "href": "\/api\/languages\/cs"
                        }
                    }
                },
                "cute_test_fills": [
                    {
                        "id": 1,
                        "start": "2015-11-19T10:53:48+0100",
                        "end": "2015-11-19T11:03:54+0100",
                        "score_number": 10,
                        "redirect_url": "http:\/\/example.com\/",
                        "test_url": "http:\/\/www.cut-e.net\/maptq\/ws\/ws_req.aspx?reqid=81C26FA4-6A5E-4DEC-9A69-700A5B5BF4B5",
                        "_embedded": {
                            "completed": true,
                            "state": "completed",
                            "result_description": "consistency_high",
                            "cute_test": {
                                "id": 2,
                                "_links": {
                                    "self": {
                                        "href": "\/api\/cute-tests\/2"
                                    }
                                },
                                "_embedded": {
                                    "name": {
                                        "cs": "Měření kompetencí",
                                        "en": "Competencies"
                                    },
                                    "intro": {
                                        "en": "Lorem ipsum...",
                                        "cs": "Lorem ipsum..."
                                    },
                                    "result_type": "shapes"
                                }
                            }
                        }
                    },
                    {
                        "id": 3,
                        "start": "2015-11-19T10:53:48+0100",
                        "end": "2015-11-19T11:03:54+0100",
                        "score_number": 85,
                        "redirect_url": "http:\/\/example.com\/",
                        "test_url": "http:\/\/www.cut-e.net\/maptq\/ws\/ws_req.aspx?reqid=81C26FA4-6A5E-4DEC-9A69-700A5B5BF4B5",
                        "_embedded": {
                            "completed": true,
                            "state": "completed",
                            "result_description": "percentile",
                            "cute_test": {
                                "id": 3,
                                "_links": {
                                    "self": {
                                        "href": "\/api\/cute-tests\/3"
                                    }
                                },
                                "_embedded": {
                                    "name": {
                                        "cs": "Deduktivně-logické myšlení",
                                        "en": "Deductively-logical thinking"
                                    },
                                    "intro": {
                                        "en": "Lorem ipsum...",
                                        "cs": "Lorem ipsum..."
                                    },
                                    "result_type": "oi"
                                }
                            }
                        }
                    },
                    {
                        "id": 2,
                        "start": "2015-11-19T10:53:48+0100",
                        "redirect_url": "http:\/\/example.com\/",
                        "test_url": "http:\/\/www.cut-e.net\/maptq\/ws\/ws_req.aspx?reqid=81C26FA4-6A5E-4DEC-9A69-700A5B5BF4B5",
                        "_embedded": {
                            "completed": true,
                            "state": "blocked",
                            "cute_test": {
                                "id": 1,
                                "_links": {
                                    "self": {
                                        "href": "\/api\/cute-tests\/1"
                                    }
                                },
                                "_embedded": {
                                    "name": {
                                        "cs": "Logické myšlení",
                                        "en": "Logical thinking"
                                    },
                                    "intro": {
                                        "en": "Lorem ipsum...",
                                        "cs": "Lorem ipsum..."
                                    },
                                    "result_type": "oi"
                                }
                            }
                        }
                    },
                    {
                        "id": 12,
                        "start": "2015-11-19T10:53:48+0100",
                        "redirect_url": "http:\/\/example.com\/",
                        "test_url": "http:\/\/www.cut-e.net\/maptq\/ws\/ws_req.aspx?reqid=81C26FA4-6A5E-4DEC-9A69-700A5B5BF4B5",
                        "_embedded": {
                            "completed": false,
                            "state": "in_progress",
                            "cute_test": {
                                "id": 5,
                                "_links": {
                                    "self": {
                                        "href": "\/api\/cute-tests\/5"
                                    }
                                },
                                "_embedded": {
                                    "name": {
                                        "cs": "Cute Test 5",
                                        "en": "Cute Test 5"
                                    },
                                    "intro": {
                                        "en": "Lorem ipsum...",
                                        "cs": "Lorem ipsum..."
                                    },
                                    "result_type": "oi"
                                }
                            }
                        }
                    }
                ],
                "test_fills": [
                    {
                        "id": 9,
                        "start": "2015-12-14T14:01:52+0100",
                        "_links": {
                            "self": {
                                "href": "\/api\/test-fills\/1"
                            },
                            "test": {
                                "href": "\/api\/tests\/1"
                            },
                            "drawn_questions": {
                                "href": "\/api\/drawn-questions"
                            }
                        },
                        "_embedded": {
                            "completed": false,
                            "state": "not_started",
                            "test": {
                                "id": 1,
                                "type": "one-page",
                                "number_of_questions": 4,
                                "maximum_time": 300,
                                "shuffle_questions": true,
                                "logo": "http://localhost:8080/images/test-placeholders/placeholder_testu1.svg",
                                "_links": {
                                    "self": {
                                        "href": "\/api\/tests\/1"
                                    }
                                },
                                "_embedded": {
                                    "name": {
                                        "cs": "Znalostní test",
                                        "en": "Knowledge test"
                                    },
                                    "intro": {
                                        "en": "Knowledge test for JavaScript language, level Senior.",
                                        "cs": "Znalostn\u00ed test jazyka JavaScript na \u00farovni Senior,"
                                    },
                                    "average_fill_time": 250
                                }
                            }
                        }
                    },
                    {
                        "id": 2,
                        "start": "2015-11-14T14:01:52+0100",
                        "end": "2015-11-14T14:01:53+0100",
                        "score": 5000,
                        "percentile": 97,
                        "percent": 50,
                        "_links": {
                            "self": {
                                "href": "\/api\/test-fills\/2"
                            },
                            "test": {
                                "href": "\/api\/tests\/2"
                            },
                            "drawn_questions": {
                                "href": "\/api\/drawn-questions"
                            }
                        },
                        "_embedded": {
                            "completed": true,
                            "state": "not_started",
                            "test": {
                                "id": 2,
                                "type": "one-page",
                                "number_of_questions": 5,
                                "maximum_time": 450,
                                "shuffle_questions": false,
                                "logo": "http:\/\/example.com\/test\/1",
                                "_links": {
                                    "self": {
                                        "href": "\/api\/tests\/1"
                                    }
                                },
                                "_embedded": {
                                    "name": {
                                        "cs": "HTML",
                                        "en": "HTML"
                                    },
                                    "intro": {
                                        "en": "Knowledge test for JavaScript language, level Senior.",
                                        "cs": "Znalostn\u00ed test jazyka JavaScript na \u00farovni Senior,"
                                    },
                                    "average_fill_time": 300
                                }
                            }
                        }
                    }
                ],
                "history": [
                    {
                        "op": "applied",
                        "date": "2015-12-14T14:01:53+0100"
                    },
                    {
                        "op": "invited",
                        "date": "2015-12-14T14:01:53+0100"
                    },
                    {
                        "op": "first-login",
                        "date": "2015-12-14T14:01:53+0100"
                    },
                    {
                        "op": "finished",
                        "name": {
                            "en": "JavaScript Senior",
                            "cs": "JavaScript Senior"
                        },
                        "date": "2015-12-14T14:01:53+0100"
                    },
                    {
                        "op": "contacted",
                        "date": "2015-12-14T14:01:53+0100"
                    },
                    {
                        "op": "moved-to-application-state",
                        "application_state": 12,
                        "date": "2015-12-14T14:01:53+0100"
                    },
                    {
                        "op": "reclaimed",
                        "date": "2015-12-14T14:01:53+0100"
                    }
                ],
                "number_of_tests": 4,
                "number_of_completed_tests": 1,
                "last_completed_test_date": "2015-12-14T14:01:53+0100",
                "state": "in_progress"
            },
            "last_contact": {
                "created": "2015-12-14T14:01:53+0100",
                "text": "Vážený pane, Lorem ipsum..."
            }
        }

+ Response 404 (application/problem+json)

        {
            "title": "Your request is invalid.",
            "type": "https://api.hiri.com/problem/bad_request",
            "status": 404,
            "detail": "Candidate with given id does not exist."
        }

### Update a Candidate [PUT]

Allows you to update a Candidate with a provided ID. You don't have to provide all the parameters,
only those provided will be updated.

Note: we chose usability over RESTful corectness, where you have to provide all
the parameters in PUT request otherwise they are deleted.

+ Request (application/json)

        {
            "job": "2",
            "name": "Johnny Doe",
            "email": "johnny.doe@example.com",
            "ip_address": "127.0.0.2",
            "note": "I don't like him anymore!"
        }

+ Response 201 (application/hal+json)

        {
            "ok": true,
            "updated": {
                "id": 1,
                "created": "2015-12-01T19:25:20+0100",
                "name": "Johhny Doe",
                "email": "johnny.doe@example.com",
                "note": "I don't like him anymore.",
                "hash": "aaa-aaa-aaa",
                "avatar": "1",
                "_links": {
                    "self": {
                        "href": "\/api\/candidates\/1"
                    },
                    "job": {
                        "href": "\/api\/jobs\/2"
                    },
                    "company": {
                        "href": "\/api\/companies\/1"
                    }
                },
                "_embedded": {
                    "job": {
                        "id": 2,
                        "created": "2015-12-01T19:25:20+0100",
                        "_links": {
                            "self": {
                                "href": "\/api\/jobs\/2"
                            },
                            "company": {
                                "href": "\/api\/companies\/1"
                            },
                            "candidates": {
                                "href": "\/api\/candidates?job_id=2"
                            }
                        },
                        "_embedded": {
                            "title": [],
                            "description": [],
                            "state": "closed",
                            "number_of_candidates": 1,
                            "number_of_completed_candidates": 1,
                            "number_of_tests": 0
                        }
                    },
                    "company": {
                        "id": 1,
                        "name": "Hiri.cz",
                        "webalized": "hiri-cz",
                        "created": "2015-12-01T19:25:20+0100",
                        "_links": {
                            "self": {
                                "href": "\/api\/companies\/1"
                            },
                            "jobs": {
                                "href": "\/api\/jobs?company_id=1"
                            },
                            "jobs:active": {
                                "href": "\/api\/jobs?company_id=1&active=1"
                            }
                        }
                    },
                    "user": {
                        "id": 1,
                        "name": "John Doe",
                        "email": "john.doe@example.com",
                        "created": "2015-12-01T19:25:20+0100",
                        "_links": {
                            "self": {
                                "href": "\/api\/users\/1"
                            },
                            "companies": {
                                "href": "\/api\/companies?user_id=1"
                            },
                            "language": {
                                "href": "Languages:readAll"
                            }
                        }
                    },
                    "cute_test_fills": [],
                    "testFills": [],
                    "history": [
                        {
                            "op": "created",
                            "date": "2015-12-01T19:25:20+0100"
                        },
                        {
                            "op": "completed"
                        }
                    ],
                    "number_of_tests": 0,
                    "number_of_completed_tests": 0,
                    "last_completed_test_date": null,
                    "state": "completed"
                }
            }
        }

### Hide a Candidate [DELETE]

Allows you to archive a Candidate with a provided ID. The candidate won't be visible
for you anymore.

+ Response 200 (application/hal+json)

        {
            "ok": true
        }


# Group Candidate Contacts

## Candidate Contacts Collection [/api/candidate-contacts?limit={limit}&page={page}&sort={sort}]

+ Parameters
    + limit (number, optional) - Limits number of candidate contacts returned in the request
    + page (number, optional) - Distance from beginning of the array of available candidate contacts
    + sort (string, optional) - Sorts the result in the given order. The format for sort is "column+ASC,column+DESC"

### List Candidate Contacts [GET]

Lists Candidate Contacts.

+ Response 200 (application/hal+json)

        {
            "_embedded": {
                "candidate_contacts": [
                    {
                        "id": 1,
                        "subject": "Hola!",
                        "text": "Dear [name], Lorem Ipsum!",
                        "created": "2016-03-04T20:22:11+0100",
                        "type": "contact",
                        "_links": {
                            "self": {
                                "href": "\/api\/candidate-contacts\/1"
                            }
                        },
                        "_embedded": {
                            "candidate": {
                                "id": 1,
                                "created": "2016-03-04T20:22:11+0100",
                                "name": "John Doe",
                                "email": "john.doe@example.com",
                                "note": "Note",
                                "hash": "aaa-aaa-aaa",
                                "avatar": "1",
                                "_links": {
                                    "self": {
                                        "href": "\/api\/candidates\/1"
                                    },
                                    "job": {
                                        "href": "\/api\/jobs\/1"
                                    },
                                    "company": {
                                        "href": "\/api\/companies\/1"
                                    }
                                },
                                "_embedded": {
                                    "number_of_tests": 0,
                                    "number_of_completed_tests": 0,
                                    "last_completed_test_date": null,
                                    "state": "inactive"
                                }
                            }
                        }
                    },
                    {
                        "id": 2,
                        "subject": "Hola!",
                        "text": "Dear [name], Lorem Ipsum!",
                        "created": "2016-03-04T20:22:11+0100",
                        "type": "contact",
                        "_links": {
                            "self": {
                                "href": "\/api\/candidate-contacts\/2"
                            }
                        },
                        "_embedded": {
                            "candidate": {
                                "id": 2,
                                "created": "2016-03-04T20:22:11+0100",
                                "name": "John Doe",
                                "email": "john.doe@example.com",
                                "note": "Note",
                                "hash": "aaa-aaa-aaa",
                                "avatar": "1",
                                "_links": {
                                    "self": {
                                        "href": "\/api\/candidates\/2"
                                    },
                                    "job": {
                                        "href": "\/api\/jobs\/1"
                                    },
                                    "company": {
                                        "href": "\/api\/companies\/1"
                                    }
                                },
                                "_embedded": {
                                    "number_of_tests": 0,
                                    "number_of_completed_tests": 0,
                                    "last_completed_test_date": null,
                                    "state": "inactive"
                                }
                            }
                        }
                    }
                ]
            }
        }

### Create Candidate Contact [POST]

Creates a Candidate Contact with given parameters.

+ Request (application/json)

    + Attributes
        + candidate (number, required) - ID of the Candidate
        + subject (string, required) - Subject of the contact
        + text (string, required) - Text of the contact
        + type (string, required) - Type of the contact. Can be 'reminder' for reminding Candidate to fill tests, 'refusal' to refuse the Candidate and 'contact' for everything else.

    + Body

            {
                "candidate": 1,
                "subject": "Lorem ...",
                "text": "Lorem ipsum dolor sit amet, consectetur adipiccumsan nulla Nam suscipit vitae libero quis porttitor.",
                "type": "contact"
            }

+ Response 201 (application/hal+json)

        {
            "ok": true,
            "inserted": {
                "id": 1,
                "subject": "Lorem ...",
                "text": "Lorem ipsum dolor sit amet, consectetur adipiccumsan nulla Nam suscipit vitae libero quis porttitor.",
                "created": "2016-03-04T20:22:59+0100",
                "type": "contact",
                "_links": {
                    "self": {
                        "href": "\/api\/candidate-contacts\/7"
                    }
                },
                "_embedded": {
                    "candidate": {
                        "id": 1,
                        "created": "2016-03-04T20:22:59+0100",
                        "name": "John Doe",
                        "email": "john.doe@example.com",
                        "note": "Note",
                        "hash": "aaa-aaa-aaa",
                        "avatar": "2",
                        "_links": {
                            "self": {
                                "href": "\/api\/candidates\/1"
                            },
                            "job": {
                                "href": "\/api\/jobs\/1"
                            },
                            "company": {
                                "href": "\/api\/companies\/1"
                            }
                        },
                        "_embedded": {
                            "number_of_tests": 0,
                            "number_of_completed_tests": 0,
                            "last_completed_test_date": null,
                            "state": "inactive"
                        }
                    }
                }
            }
        }

## Candidate's Candidate Contacts Collection [/api/candidates/{candidate_id}/candidate-contacts?limit={limit}&page={page}&sort={sort}]

+ Parameters
    + candidate_id (number, required) - ID of the Candidate
    + limit (number, optional) - Limits number of candidate contacts returned in the request
    + page (number, optional) - Distance from beginning of the array of available candidate contacts
    + sort (string, optional) - Sorts the result in the given order. The format for sort is "column+ASC,column+DESC"

### List Candidate's Candidate Contacts [GET]

Lists Candidate's Candidate Contacts.

+ Response 200 (application/hal+json)

        {
            "_embedded": {
                "candidate_contacts": [
                    {
                        "id": 1,
                        "subject": "Hola!",
                        "text": "Dear [name], Lorem Ipsum!",
                        "created": "2016-03-04T20:22:11+0100",
                        "type": "contact",
                        "_links": {
                            "self": {
                                "href": "\/api\/candidate-contacts\/1"
                            }
                        },
                        "_embedded": {
                            "candidate": {
                                "id": 1,
                                "created": "2016-03-04T20:22:11+0100",
                                "name": "John Doe",
                                "email": "john.doe@example.com",
                                "note": "Note",
                                "hash": "aaa-aaa-aaa",
                                "avatar": "1",
                                "_links": {
                                    "self": {
                                        "href": "\/api\/candidates\/1"
                                    },
                                    "job": {
                                        "href": "\/api\/jobs\/1"
                                    },
                                    "company": {
                                        "href": "\/api\/companies\/1"
                                    }
                                },
                                "_embedded": {
                                    "number_of_tests": 0,
                                    "number_of_completed_tests": 0,
                                    "last_completed_test_date": null,
                                    "state": "inactive"
                                }
                            }
                        }
                    }
                ]
            }
        }

## Company's Candidate Contacts [/api/companies/{company_id}/candidate-contacts?limit={limit}&page={page}&sort={sort}]

+ Parameters
    + company-id (number, required) - ID of the Company
    + limit (number, optional) - Limits number of candidate contacts returned in the request
    + page (number, optional) - Distance from beginning of the array of available candidate contacts
    + sort (string, optional) - Sorts the result in the given order. The format for sort is "column+ASC,column+DESC"

### List Company's Candidate Contacts [GET]

Lists Company's Candidate Contacts.

+ Response 200 (application/hal+json)

        {
            "_embedded": {
                "candidate_contacts": [
                    {
                        "id": 1,
                        "subject": "Hola!",
                        "text": "Dear [name], Lorem Ipsum!",
                        "created": "2016-03-04T20:22:42+0100",
                        "type": "contact",
                        "_links": {
                            "self": {
                                "href": "\/api\/candidate-contacts\/1"
                            }
                        },
                        "_embedded": {
                            "candidate": {
                                "id": 1,
                                "created": "2016-03-04T20:22:42+0100",
                                "name": "John Doe",
                                "email": "john.doe@example.com",
                                "note": "Note",
                                "hash": "aaa-aaa-aaa",
                                "avatar": "3",
                                "_links": {
                                    "self": {
                                        "href": "\/api\/candidates\/1"
                                    },
                                    "job": {
                                        "href": "\/api\/jobs\/1"
                                    },
                                    "company": {
                                        "href": "\/api\/companies\/1"
                                    }
                                },
                                "_embedded": {
                                    "number_of_tests": 0,
                                    "number_of_completed_tests": 0,
                                    "last_completed_test_date": null,
                                    "state": "inactive"
                                }
                            }
                        }
                    }
                ]
            }
        }

## Candidate Contact [/api/candidate-contacts/{id}]

+ Attributes
    + id (number, required) - ID of the Candidate Contact
    + subject (string, required) - Subject of the Candidate Contact
    + text (string, required) - Text of the Candidate Contact
    + type (string, required) - Type of the Candidate Contact. Can be 'reminder' for reminding Candidate to fill tests, 'refusal' to refuse the Candidate and 'contact' for everything else.
    + embedded.candidate (number, required) - ID of the Candidate

+ Parameters
    + id (number, required) - ID of the Candidate Contact

### Retrieve Candidate Contact [GET]

Retrieves Candidate Contact with given ID.

+ Response 200 (application/hal+json)

        {
            "id": 1,
            "subject": "Hola!",
            "text": "Dear [name], Lorem Ipsum!",
            "created": "2016-03-04T20:23:20+0100",
            "type": "contact",
            "_links": {
                "self": {
                    "href": "\/api\/candidate-contacts\/1"
                }
            },
            "_embedded": {
                "candidate": {
                    "id": 1,
                    "created": "2016-03-04T20:23:20+0100",
                    "name": "John Doe",
                    "email": "john.doe@example.com",
                    "note": "Note",
                    "hash": "aaa-aaa-aaa",
                    "avatar": "2",
                    "_links": {
                        "self": {
                            "href": "\/api\/candidates\/1"
                        },
                        "job": {
                            "href": "\/api\/jobs\/1"
                        },
                        "company": {
                            "href": "\/api\/companies\/1"
                        }
                    },
                    "_embedded": {
                        "number_of_tests": 0,
                        "number_of_completed_tests": 0,
                        "last_completed_test_date": null,
                        "state": "inactive"
                    }
                }
            }
        }

### Update Candidate Contact [PUT]

Updates Candidate Contact with given data.

+ Request (application/json)

    + Attributes
        + subject (string, required) - Subject of the contact
        + text (string, required) - Text of the contact
        + type (string, required) - Type of the contact. Can be 'reminder' for reminding Candidate to fill tests, 'refusal' to refuse the Candidate and 'contact' for everything else.

    + Body

            {
                "subject": "Hola!",
                "text": "whoops, typo!"
            }

+ Response 200 (application/hal+json)

        {
            "ok": true,
            "updated": {
                "id": 1,
                "subject": "Hola!",
                "text": "whoops, typo!",
                "created": "2016-03-04T20:23:53+0100",
                "type": "contact",
                "_links": {
                    "self": {
                        "href": "\/api\/candidate-contacts\/1"
                    }
                },
                "_embedded": {
                    "candidate": {
                        "id": 1,
                        "created": "2016-03-04T20:23:53+0100",
                        "name": "John Doe",
                        "email": "john.doe@example.com",
                        "note": "Note",
                        "hash": "aaa-aaa-aaa",
                        "avatar": "2",
                        "_links": {
                            "self": {
                                "href": "\/api\/candidates\/1"
                            },
                            "job": {
                                "href": "\/api\/jobs\/1"
                            },
                            "company": {
                                "href": "\/api\/companies\/1"
                            }
                        },
                        "_embedded": {
                            "number_of_tests": 0,
                            "number_of_completed_tests": 0,
                            "last_completed_test_date": null,
                            "state": "inactive"
                        }
                    }
                }
            }
        }

### Soft delete Candidate Contact [DELETE]

Soflty deletes Candidate Contact.

+ Response 200 (application/hal+json)

        {
            "ok": true
        }

# Group Candidate Complaints

## Candidate Complaints Collection [/api/candidate-complaints?limit={limit}&page={page}&sort={sort}]

+ Parameters
    + limit (number, optional) - Limits number of candidates returned in the request
    + page (number, optional) - Distance from beginning of the array of available candidates
    + sort (string, optional) - Sorts the result in the given order. The format for sort is "column+ASC,column+DESC"

### List Candidate Complaints [GET]

Lists Candidate Complaints

+ Response 200 (application/hal+json)

        {
            "_embedded": {
                "candidate_complaints": [
                    {
                        "id": 1,
                        "reason": "fake",
                        "created": "2016-03-07T16:27:51+0100",
                        "text": "Lorem ipsum",
                        "_links": {
                            "self": {
                                "href": "\/api\/candidate-complaints\/1"
                            }
                        },
                        "_embedded": {
                            "candidate": {
                                "id": 1,
                                "created": "2016-03-07T16:27:51+0100",
                                "name": "John Doe",
                                "email": "john.doe@example.com",
                                "note": "Note",
                                "hash": "aaa-aaa-aaa",
                                "avatar": "2",
                                "_links": {
                                    "self": {
                                        "href": "\/api\/candidates\/1"
                                    },
                                    "job": {
                                        "href": "\/api\/jobs\/1"
                                    },
                                    "company": {
                                        "href": "\/api\/companies\/1"
                                    }
                                },
                                "_embedded": {
                                    "number_of_tests": 0,
                                    "number_of_completed_tests": 0,
                                    "last_completed_test_date": null,
                                    "state": "inactive"
                                }
                            },
                            "created_by": {
                                "id": 1,
                                "name": "John Doe",
                                "email": "john.doe@example.com",
                                "created": "2016-03-07T16:27:51+0100",
                                "_links": {
                                    "self": {
                                        "href": "\/api\/users\/1"
                                    },
                                    "companies": {
                                        "href": "\/api\/companies?user_id=1"
                                    },
                                    "language": {
                                        "href": "\/api\/languages\/cs"
                                    }
                                },
                                "_embedded": {
                                    "language": {
                                        "id": "cs",
                                        "_links": {
                                            "self": {
                                                "href": "\/api\/languages\/cs"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    {
                        "id": 2,
                        "reason": "irrelevant",
                        "created": "2016-03-07T16:27:51+0100",
                        "text": "Lorem ipsum",
                        "_links": {
                            "self": {
                                "href": "\/api\/candidate-complaints\/2"
                            }
                        },
                        "_embedded": {
                            "candidate": {
                                "id": 2,
                                "created": "2016-03-07T16:27:51+0100",
                                "name": "John Doe",
                                "email": "john.doe@example.com",
                                "note": "Note",
                                "hash": "aaa-aaa-aaa",
                                "avatar": "3",
                                "_links": {
                                    "self": {
                                        "href": "\/api\/candidates\/2"
                                    },
                                    "job": {
                                        "href": "\/api\/jobs\/1"
                                    },
                                    "company": {
                                        "href": "\/api\/companies\/1"
                                    }
                                },
                                "_embedded": {
                                    "number_of_tests": 0,
                                    "number_of_completed_tests": 0,
                                    "last_completed_test_date": null,
                                    "state": "inactive"
                                }
                            },
                            "created_by": {
                                "id": 1,
                                "name": "John Doe",
                                "email": "john.doe@example.com",
                                "created": "2016-03-07T16:27:51+0100",
                                "_links": {
                                    "self": {
                                        "href": "\/api\/users\/1"
                                    },
                                    "companies": {
                                        "href": "\/api\/companies?user_id=1"
                                    },
                                    "language": {
                                        "href": "\/api\/languages\/cs"
                                    }
                                },
                                "_embedded": {
                                    "language": {
                                        "id": "cs",
                                        "_links": {
                                            "self": {
                                                "href": "\/api\/languages\/cs"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                ]
            }
        }

### Create Candidate Complaint [POST]

Creates Candidate Complaint with given parameters.

+ Request (application/json)

    + Attributes
        + candidate (number, required) - ID of the Candidate
        + reason (string, required) - Reason for the Complaint. Can be 'fake', 'irrelevant' or 'testing'.
        + text (string, required) - Text of the Complaint

    + Body

            {
                "candidate": 1,
                "reason": "fake",
                "text": "Lorem ipsum"
            }

+ Response 201 (application/hal+json)

        {
            "ok": true,
            "inserted": {
                "id": 4,
                "reason": "fake",
                "created": "2016-03-07T16:28:06+0100",
                "text": "Lorem ipsum",
                "_links": {
                    "self": {
                        "href": "\/api\/candidate-complaints\/4"
                    }
                },
                "_embedded": {
                    "candidate": {
                        "id": 1,
                        "created": "2016-03-07T16:28:07+0100",
                        "name": "John Doe",
                        "email": "john.doe@example.com",
                        "note": "Note",
                        "hash": "aaa-aaa-aaa",
                        "avatar": "3",
                        "_links": {
                            "self": {
                                "href": "\/api\/candidates\/1"
                            },
                            "job": {
                                "href": "\/api\/jobs\/1"
                            },
                            "company": {
                                "href": "\/api\/companies\/1"
                            }
                        },
                        "_embedded": {
                            "number_of_tests": 0,
                            "number_of_completed_tests": 0,
                            "last_completed_test_date": null,
                            "state": "inactive"
                        }
                    },
                    "created_by": {
                        "id": 1,
                        "name": "John Doe",
                        "email": "john.doe@example.com",
                        "created": "2016-03-07T16:28:07+0100",
                        "_links": {
                            "self": {
                                "href": "\/api\/users\/1"
                            },
                            "companies": {
                                "href": "\/api\/companies?user_id=1"
                            },
                            "language": {
                                "href": "\/api\/languages\/cs"
                            }
                        },
                        "_embedded": {
                            "language": {
                                "id": "cs",
                                "_links": {
                                    "self": {
                                        "href": "\/api\/languages\/cs"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

## Candidate's Candidate Complaints Collection [/api/candidates/{candidate_id}/candidate-complaints?limit={limit}&page={page}&sort={sort}]

+ Parameters
    + candidate_id (number, required) - Candidate's ID
    + limit (number, optional) - Limits number of candidates returned in the request
    + page (number, optional) - Distance from beginning of the array of available candidates
    + sort (string, optional) - Sorts the result in the given order. The format for sort is "column+ASC,column+DESC"

### List Candidate's Candidate Complaints [GET]

Lists Candidate's Candidate Complaints

+ Response 200 (application/hal+json)

        {
            "_embedded": {
                "candidate_complaints": [
                    {
                        "id": 1,
                        "reason": "fake",
                        "created": "2016-03-07T16:28:02+0100",
                        "text": "Lorem ipsum",
                        "_links": {
                            "self": {
                                "href": "\/api\/candidate-complaints\/1"
                            }
                        },
                        "_embedded": {
                            "candidate": {
                                "id": 1,
                                "created": "2016-03-07T16:28:02+0100",
                                "name": "John Doe",
                                "email": "john.doe@example.com",
                                "note": "Note",
                                "hash": "aaa-aaa-aaa",
                                "avatar": "1",
                                "_links": {
                                    "self": {
                                        "href": "\/api\/candidates\/1"
                                    },
                                    "job": {
                                        "href": "\/api\/jobs\/1"
                                    },
                                    "company": {
                                        "href": "\/api\/companies\/1"
                                    }
                                },
                                "_embedded": {
                                    "number_of_tests": 0,
                                    "number_of_completed_tests": 0,
                                    "last_completed_test_date": null,
                                    "state": "inactive"
                                }
                            },
                            "created_by": {
                                "id": 1,
                                "name": "John Doe",
                                "email": "john.doe@example.com",
                                "created": "2016-03-07T16:28:01+0100",
                                "_links": {
                                    "self": {
                                        "href": "\/api\/users\/1"
                                    },
                                    "companies": {
                                        "href": "\/api\/companies?user_id=1"
                                    },
                                    "language": {
                                        "href": "\/api\/languages\/cs"
                                    }
                                },
                                "_embedded": {
                                    "language": {
                                        "id": "cs",
                                        "_links": {
                                            "self": {
                                                "href": "\/api\/languages\/cs"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                ]
            }
        }

## Candidate Complaint [/api/candidate-complaints/{id}]

+ Attributes
    + id (number, required) - ID of the Candidate Complaint
    + reason (string, required) - Reason of the complaint. Can be 'fake', 'irrelevant' or 'testing'.
    + created (string, required) - Date when the Candidate Complaint was created.
    + embedded.candidate (object, required) - Candidate in question
    + embedded.created_by (object, required) - User who created the Candidate Complaint

+ Parameters
    + id (number, required) - ID of the Candidate Complaint

### Retrieve Candidate Complaint [GET]

Retrieves Candidate Complaint with given ID.

+ Response 200 (application/hal+json)

        {
            "id": 1,
            "reason": "fake",
            "created": "2016-03-07T16:28:28+0100",
            "text": "Lorem ipsum",
            "_links": {
                "self": {
                    "href": "\/api\/candidate-complaints\/1"
                }
            },
            "_embedded": {
                "candidate": {
                    "id": 1,
                    "created": "2016-03-07T16:28:28+0100",
                    "name": "John Doe",
                    "email": "john.doe@example.com",
                    "note": "Note",
                    "hash": "aaa-aaa-aaa",
                    "avatar": "3",
                    "_links": {
                        "self": {
                            "href": "\/api\/candidates\/1"
                        },
                        "job": {
                            "href": "\/api\/jobs\/1"
                        },
                        "company": {
                            "href": "\/api\/companies\/1"
                        }
                    },
                    "_embedded": {
                        "number_of_tests": 0,
                        "number_of_completed_tests": 0,
                        "last_completed_test_date": null,
                        "state": "inactive"
                    }
                },
                "created_by": {
                    "id": 1,
                    "name": "John Doe",
                    "email": "john.doe@example.com",
                    "created": "2016-03-07T16:28:28+0100",
                    "_links": {
                        "self": {
                            "href": "\/api\/users\/1"
                        },
                        "companies": {
                            "href": "\/api\/companies?user_id=1"
                        },
                        "language": {
                            "href": "\/api\/languages\/cs"
                        }
                    },
                    "_embedded": {
                        "language": {
                            "id": "cs",
                            "_links": {
                                "self": {
                                    "href": "\/api\/languages\/cs"
                                }
                            }
                        }
                    }
                }
            }
        }

### Update Candidate Complaint [PUT]

Updates Candidate Complaint with given ID.

+ Request (application/json)

    + Attributes
        + candidate (number, optional) - ID of the Candidate
        + reason (string, optional) - Reason for the Complaint. Can be 'fake', 'irrelevant' or 'testing'.
        + text (string, optional) - Text of the Complaint

    + Body

            {
                "candidate": 1,
                "reason": "fake",
                "text": "Lorem ipsum"
            }

+ Response 200 (application/hal+json)

        {
            "ok": true,
            "updated": {
                "id": 1,
                "reason": "irrelevant",
                "created": "2016-03-07T16:28:48+0100",
                "text": "Lorem ipsum",
                "_links": {
                    "self": {
                        "href": "\/api\/candidate-complaints\/1"
                    }
                },
                "_embedded": {
                    "candidate": {
                        "id": 1,
                        "created": "2016-03-07T16:28:48+0100",
                        "name": "John Doe",
                        "email": "john.doe@example.com",
                        "note": "Note",
                        "hash": "aaa-aaa-aaa",
                        "avatar": "2",
                        "_links": {
                            "self": {
                                "href": "\/api\/candidates\/1"
                            },
                            "job": {
                                "href": "\/api\/jobs\/1"
                            },
                            "company": {
                                "href": "\/api\/companies\/1"
                            }
                        },
                        "_embedded": {
                            "number_of_tests": 0,
                            "number_of_completed_tests": 0,
                            "last_completed_test_date": null,
                            "state": "inactive"
                        }
                    },
                    "created_by": {
                        "id": 1,
                        "name": "John Doe",
                        "email": "john.doe@example.com",
                        "created": "2016-03-07T16:28:47+0100",
                        "_links": {
                            "self": {
                                "href": "\/api\/users\/1"
                            },
                            "companies": {
                                "href": "\/api\/companies?user_id=1"
                            },
                            "language": {
                                "href": "\/api\/languages\/cs"
                            }
                        },
                        "_embedded": {
                            "language": {
                                "id": "cs",
                                "_links": {
                                    "self": {
                                        "href": "\/api\/languages\/cs"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }



### Soft Delete Candidate Complaint [DELETE]

Softly deletes Candidate Complaint with given ID.

+ Response 200 (application/hal+json)

        {
            "ok": true
        }



# Group Company Administrators

## Company Administrators Collection [/api/company-administrators?limit={limit}&page={page}&sort={sort}]

+ Parameters
    + limit (number, optional) - Limits number of company administrators returned in the request
    + page (number, optional) - Distance from beginning of the array of available company administrators
    + sort (string, optional) - Sorts the result in the given order. The format for sort is "column+ASC,column+DESC"

### List Company Administrators [GET]

Lists all Company Administrators.

+ Response 200 (application/hal+json)

        {
            "_embedded": {
                "company_administrators": [
                    {
                        "id": 1,
                        "role": "boss",
                        "email": "john.doe@example.com",
                        "name": "John Doe",
                        "created": "2016-03-10T16:50:52+0100",
                        "_links": {
                            "self": {
                                "href": "\/api\/company-administrators\/1"
                            }
                        },
                        "_embedded": {
                            "company": {
                                "id": 1,
                                "name": "Hiri.cz",
                                "webalized": "hiri-cz",
                                "created": "2016-03-10T16:50:51+0100",
                                "address": "Sp\u00e1len\u00e1 1",
                                "city": "Praha",
                                "country": "\u010cesk\u00e1 republika",
                                "first_name_basis": false,
                                "_links": {
                                    "self": {
                                        "href": "\/api\/companies\/1"
                                    },
                                    "jobs": {
                                        "href": "\/api\/jobs?company_id=1"
                                    },
                                    "jobs:active": {
                                        "href": "\/api\/jobs?company_id=1&active=1"
                                    }
                                }
                            },
                            "user": {
                                "id": 1,
                                "name": "John Doe",
                                "email": "john.doe@example.com",
                                "created": "2016-03-10T16:50:52+0100",
                                "_links": {
                                    "self": {
                                        "href": "\/api\/users\/1"
                                    },
                                    "companies": {
                                        "href": "\/api\/companies?user_id=1"
                                    },
                                    "language": {
                                        "href": "\/api\/languages\/cs"
                                    }
                                },
                                "_embedded": {
                                    "language": {
                                        "id": "cs",
                                        "_links": {
                                            "self": {
                                                "href": "\/api\/languages\/cs"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    {
                        "id": 2,
                        "role": "boss",
                        "email": "janko.naucny@example.com",
                        "name": "Janko Naucny",
                        "created": "2015-01-10T16:50:52+0100",
                        "_links": {
                            "self": {
                                "href": "\/api\/company-administrators\/2"
                            }
                        },
                        "_embedded": {
                            "company": {
                                "id": 1,
                                "name": "Hiri.cz",
                                "webalized": "hiri-cz",
                                "created": "2016-03-10T16:50:51+0100",
                                "address": "Sp\u00e1len\u00e1 1",
                                "city": "Praha",
                                "country": "\u010cesk\u00e1 republika",
                                "first_name_basis": false,
                                "_links": {
                                    "self": {
                                        "href": "\/api\/companies\/1"
                                    },
                                    "jobs": {
                                        "href": "\/api\/jobs?company_id=1"
                                    },
                                    "jobs:active": {
                                        "href": "\/api\/jobs?company_id=1&active=1"
                                    }
                                }
                            },
                            "user": {
                                "id": 2,
                                "name": "John Doe",
                                "email": "john.doe@example.com",
                                "created": "2016-03-10T16:50:52+0100",
                                "_links": {
                                    "self": {
                                        "href": "\/api\/users\/2"
                                    },
                                    "companies": {
                                        "href": "\/api\/companies?user_id=2"
                                    },
                                    "language": {
                                        "href": "\/api\/languages\/cs"
                                    }
                                },
                                "_embedded": {
                                    "language": {
                                        "id": "cs",
                                        "_links": {
                                            "self": {
                                                "href": "\/api\/languages\/cs"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    {
                        "id": 3,
                        "role": "manager",
                        "email": "keith.preston@example.com",
                        "name": "Keith Preston",
                        "created": "2016-03-10T16:50:52+0100",
                        "_links": {
                            "self": {
                                "href": "\/api\/company-administrators\/3"
                            }
                        },
                        "_embedded": {
                            "company": {
                                "id": 2,
                                "name": "\u010cesk\u00e1 Poji\u0161\u0165ovna a.s.",
                                "webalized": "ceska-pojistovna-a-s",
                                "created": "2016-03-10T16:50:51+0100",
                                "address": "Sp\u00e1len\u00e1 1",
                                "city": "Praha",
                                "country": "\u010cesk\u00e1 republika",
                                "first_name_basis": false,
                                "_links": {
                                    "self": {
                                        "href": "\/api\/companies\/2"
                                    },
                                    "jobs": {
                                        "href": "\/api\/jobs?company_id=2"
                                    },
                                    "jobs:active": {
                                        "href": "\/api\/jobs?company_id=2&active=1"
                                    }
                                }
                            },
                            "user": {
                                "id": 3,
                                "name": "John Doe",
                                "email": "john.doe@example.com",
                                "created": "2016-03-10T16:50:52+0100",
                                "_links": {
                                    "self": {
                                        "href": "\/api\/users\/3"
                                    },
                                    "companies": {
                                        "href": "\/api\/companies?user_id=3"
                                    },
                                    "language": {
                                        "href": "\/api\/languages\/cs"
                                    }
                                },
                                "_embedded": {
                                    "language": {
                                        "id": "cs",
                                        "_links": {
                                            "self": {
                                                "href": "\/api\/languages\/cs"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                ]
            }
        }

### Create Company Administrator [POST]

Creates Company Administrator with given parameters.

+ Request

    + Attributes
        + role (string, required) - Role of the Company Administrator. Can be 'boss' or 'manager'.
        + email (string, required) - Email of the Company Administrator
        + name (string, required) - Name of the Company Administrator
        + company (number, required) - The Company
        + user (number, optional) - ID of the User

    + Body

            {
                "role": "manager",
                "name": "John Doe",
                "email": "john.doe@example.com",
                "company": 1,
                "user": 1
            }

+ Response 201 (application/hal+json)

        {
            "ok": true,
            "inserted": {
                "id": 2,
                "role": "manager",
                "email": "john.doe@example.com",
                "name": 1,
                "created": "2016-03-10T16:50:08+0100",
                "_links": {
                    "self": {
                        "href": "\/api\/company-administrators\/2"
                    }
                },
                "_embedded": {
                    "company": {
                        "id": 1,
                        "name": "Hiri.cz",
                        "webalized": "hiri-cz",
                        "created": "2016-03-10T16:50:00+0100",
                        "address": "Sp\u00e1len\u00e1 1",
                        "city": "Praha",
                        "country": "\u010cesk\u00e1 republika",
                        "first_name_basis": false,
                        "_links": {
                            "self": {
                                "href": "\/api\/companies\/1"
                            },
                            "jobs": {
                                "href": "\/api\/jobs?company_id=1"
                            },
                            "jobs:active": {
                                "href": "\/api\/jobs?company_id=1&active=1"
                            }
                        }
                    },
                    "user": null
                }
            }
        }

## Company's Company Administrators Collection [/api/companies/{company_id}/company-administrators?limit={limit}&page={page}&sort={sort}]

+ Parameters
    + company_id (number, required) - ID of the Company
    + limit (number, optional) - Limits number of company adminisitrators returned in the request
    + page (number, optional) - Distance from beginning of the array of available company administrators
    + sort (string, optional) - Sorts the result in the given order. The format for sort is "column+ASC,column+DESC"

### List Company's Company Administrators [GET]

Lists all Company Administrators belonging to Company with given ID.

+ Response 200 (application/hal+json)

        {
            "_embedded": {
                "company_administrators": [
                    {
                        "id": 1,
                        "role": "boss",
                        "email": "john.doe@example.com",
                        "name": "John Doe",
                        "created": "2016-03-10T16:50:52+0100",
                        "_links": {
                            "self": {
                                "href": "\/api\/company-administrators\/1"
                            }
                        },
                        "_embedded": {
                            "company": {
                                "id": 1,
                                "name": "Hiri.cz",
                                "webalized": "hiri-cz",
                                "created": "2016-03-10T16:50:51+0100",
                                "address": "Sp\u00e1len\u00e1 1",
                                "city": "Praha",
                                "country": "\u010cesk\u00e1 republika",
                                "first_name_basis": false,
                                "_links": {
                                    "self": {
                                        "href": "\/api\/companies\/1"
                                    },
                                    "jobs": {
                                        "href": "\/api\/jobs?company_id=1"
                                    },
                                    "jobs:active": {
                                        "href": "\/api\/jobs?company_id=1&active=1"
                                    }
                                }
                            },
                            "user": {
                                "id": 1,
                                "name": "John Doe",
                                "email": "john.doe@example.com",
                                "created": "2016-03-10T16:50:52+0100",
                                "_links": {
                                    "self": {
                                        "href": "\/api\/users\/1"
                                    },
                                    "companies": {
                                        "href": "\/api\/companies?user_id=1"
                                    },
                                    "language": {
                                        "href": "\/api\/languages\/cs"
                                    }
                                },
                                "_embedded": {
                                    "language": {
                                        "id": "cs",
                                        "_links": {
                                            "self": {
                                                "href": "\/api\/languages\/cs"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    {
                        "id": 2,
                        "role": "manager",
                        "email": "john.doe@example.com",
                        "name": "John Doe",
                        "created": "2016-03-10T16:50:52+0100",
                        "_links": {
                            "self": {
                                "href": "\/api\/company-administrators\/2"
                            }
                        },
                        "_embedded": {
                            "company": {
                                "id": 1,
                                "name": "Hiri.cz",
                                "webalized": "hiri-cz",
                                "created": "2016-03-10T16:50:51+0100",
                                "address": "Sp\u00e1len\u00e1 1",
                                "city": "Praha",
                                "country": "\u010cesk\u00e1 republika",
                                "first_name_basis": false,
                                "_links": {
                                    "self": {
                                        "href": "\/api\/companies\/1"
                                    },
                                    "jobs": {
                                        "href": "\/api\/jobs?company_id=1"
                                    },
                                    "jobs:active": {
                                        "href": "\/api\/jobs?company_id=1&active=1"
                                    }
                                }
                            },
                            "user": {
                                "id": 2,
                                "name": "John Doe",
                                "email": "john.doe@example.com",
                                "created": "2016-03-10T16:50:52+0100",
                                "_links": {
                                    "self": {
                                        "href": "\/api\/users\/2"
                                    },
                                    "companies": {
                                        "href": "\/api\/companies?user_id=2"
                                    },
                                    "language": {
                                        "href": "\/api\/languages\/cs"
                                    }
                                },
                                "_embedded": {
                                    "language": {
                                        "id": "cs",
                                        "_links": {
                                            "self": {
                                                "href": "\/api\/languages\/cs"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                ]
            }
        }


## User's Company Administrators Collection [/api/users/{user_id}/company-administrators?limit={limit}&page={page}&sort={sort}]

+ Parameters
    + user_id (number, required) - ID of the User
    + limit (number, optional) - Limits number of company administrators returned in the request
    + page (number, optional) - Distance from beginning of the array of available company administrators
    + sort (string, optional) - Sorts the result in the given order. The format for sort is "column+ASC,column+DESC"

### List User's Company Administrators [GET]

Lists all Company Administrators belonging to User with given ID.

+ Response 200 (application/hal+json)

        {
            "_embedded": {
                "company_administrators": [
                    {
                        "id": 1,
                        "role": "boss",
                        "email": "john.doe@example.com",
                        "name": "John Doe",
                        "created": "2016-03-10T16:50:52+0100",
                        "_links": {
                            "self": {
                                "href": "\/api\/company-administrators\/1"
                            }
                        },
                        "_embedded": {
                            "company": {
                                "id": 1,
                                "name": "Hiri.cz",
                                "webalized": "hiri-cz",
                                "created": "2016-03-10T16:50:51+0100",
                                "address": "Sp\u00e1len\u00e1 1",
                                "city": "Praha",
                                "country": "\u010cesk\u00e1 republika",
                                "first_name_basis": false,
                                "_links": {
                                    "self": {
                                        "href": "\/api\/companies\/1"
                                    },
                                    "jobs": {
                                        "href": "\/api\/jobs?company_id=1"
                                    },
                                    "jobs:active": {
                                        "href": "\/api\/jobs?company_id=1&active=1"
                                    }
                                }
                            },
                            "user": {
                                "id": 1,
                                "name": "John Doe",
                                "email": "john.doe@example.com",
                                "created": "2016-03-10T16:50:52+0100",
                                "_links": {
                                    "self": {
                                        "href": "\/api\/users\/1"
                                    },
                                    "companies": {
                                        "href": "\/api\/companies?user_id=1"
                                    },
                                    "language": {
                                        "href": "\/api\/languages\/cs"
                                    }
                                },
                                "_embedded": {
                                    "language": {
                                        "id": "cs",
                                        "_links": {
                                            "self": {
                                                "href": "\/api\/languages\/cs"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    {
                        "id": 2,
                        "role": "manager",
                        "email": "john.doe@example.com",
                        "name": "John Doe",
                        "created": "2016-03-10T16:50:52+0100",
                        "_links": {
                            "self": {
                                "href": "\/api\/company-administrators\/3"
                            }
                        },
                        "_embedded": {
                            "company": {
                                "id": 2,
                                "name": "\u010cesk\u00e1 Poji\u0161\u0165ovna a.s.",
                                "webalized": "ceska-pojistovna-a-s",
                                "created": "2016-03-10T16:50:51+0100",
                                "address": "Sp\u00e1len\u00e1 1",
                                "city": "Praha",
                                "country": "\u010cesk\u00e1 republika",
                                "first_name_basis": false,
                                "_links": {
                                    "self": {
                                        "href": "\/api\/companies\/2"
                                    },
                                    "jobs": {
                                        "href": "\/api\/jobs?company_id=2"
                                    },
                                    "jobs:active": {
                                        "href": "\/api\/jobs?company_id=2&active=1"
                                    }
                                }
                            },
                            "user": {
                                "id": 1,
                                "name": "John Doe",
                                "email": "john.doe@example.com",
                                "created": "2016-03-10T16:50:52+0100",
                                "_links": {
                                    "self": {
                                        "href": "\/api\/users\/1"
                                    },
                                    "companies": {
                                        "href": "\/api\/companies?user_id=1"
                                    },
                                    "language": {
                                        "href": "\/api\/languages\/cs"
                                    }
                                },
                                "_embedded": {
                                    "language": {
                                        "id": "cs",
                                        "_links": {
                                            "self": {
                                                "href": "\/api\/languages\/cs"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                ]
            }
        }

## Company Administrator [/api/company-administrators/{id}]

+ Attributes
    + id (number, required) - ID of the Company Administrator
    + role (string, required) - Role of the Company Administrator. Can be 'boss' or 'manager'.
    + email (string, required) - Email of the Company Administrator
    + name (string, required) - Name of the Company Administrator
    + created (string, required) - Date when the Company Administrator was created
    + embedded.user (object, optional) - The User
    + embedded.company (object, required) - The Company

+ Parameters
    + id (number, required) - ID of the Company Administrator

### Retrieve a Company Administrator [GET]

Retrieves a Company Administrator with given ID.

+ Response 200 (application/hal+json)

        {
            "id": 1,
            "role": "manager",
            "email": "john.doe@example.com",
            "name": "John Doe",
            "created": "2016-03-10T16:46:56+0100",
            "_links": {
                "self": {
                    "href": "\/api\/company-administrators\/2"
                }
            },
            "_embedded": {
                "company": {
                    "id": 1,
                    "name": "Hiri.cz",
                    "webalized": "hiri-cz",
                    "created": "2016-03-10T16:46:56+0100",
                    "address": "Sp\u00e1len\u00e1 1",
                    "city": "Praha",
                    "country": "\u010cesk\u00e1 republika",
                    "first_name_basis": false,
                    "_links": {
                        "self": {
                            "href": "\/api\/companies\/1"
                        },
                        "jobs": {
                            "href": "\/api\/jobs?company_id=1"
                        },
                        "jobs:active": {
                            "href": "\/api\/jobs?company_id=1&active=1"
                        }
                    }
                },
                "user": {
                    "id": 1,
                    "name": "John Doe",
                    "email": "john.doe@example.com",
                    "created": "2016-03-10T16:46:56+0100",
                    "_links": {
                        "self": {
                            "href": "\/api\/users\/2"
                        },
                        "companies": {
                            "href": "\/api\/companies?user_id=2"
                        },
                        "language": {
                            "href": "\/api\/languages\/cs"
                        }
                    },
                    "_embedded": {
                        "language": {
                            "id": "cs",
                            "_links": {
                                "self": {
                                    "href": "\/api\/languages\/cs"
                                }
                            }
                        }
                    }
                }
            }
        }

### Update a Company Administrator [PUT]

Updates a Company Administrator with given ID.

+ Request

    + Attributes
        + role (string, optional) - Role of the Company Administrator. Can be 'boss' or 'manager'.
        + email (string, optional) - Email of the Company Administrator
        + name (string, optional) - Name of the Company Administrator
        + user (number, optional) - ID of the User

    + Body

            {
                "role": "boss",
                "name": "Johnny Doe",
                "email": "johnny.doe@example.com",
                "user": 1
            }

+ Response 200 (application/hal+json)

        {
            "ok": true,
            "updated": {
                "id": 2,
                "role": "manager",
                "email": "john.doe@example.com",
                "name": "Johnny Doe",
                "created": "2016-03-10T16:47:14+0100",
                "_links": {
                    "self": {
                        "href": "\/api\/company-administrators\/2"
                    }
                },
                "_embedded": {
                    "company": {
                        "id": 1,
                        "name": "Hiri.cz",
                        "webalized": "hiri-cz",
                        "created": "2016-03-10T16:47:14+0100",
                        "address": "Sp\u00e1len\u00e1 1",
                        "city": "Praha",
                        "country": "\u010cesk\u00e1 republika",
                        "first_name_basis": false,
                        "_links": {
                            "self": {
                                "href": "\/api\/companies\/1"
                            },
                            "jobs": {
                                "href": "\/api\/jobs?company_id=1"
                            },
                            "jobs:active": {
                                "href": "\/api\/jobs?company_id=1&active=1"
                            }
                        }
                    },
                    "user": {
                        "id": 2,
                        "name": "John Doe",
                        "email": "john.doe@example.com",
                        "created": "2016-03-10T16:47:14+0100",
                        "_links": {
                            "self": {
                                "href": "\/api\/users\/2"
                            },
                            "companies": {
                                "href": "\/api\/companies?user_id=2"
                            },
                            "language": {
                                "href": "\/api\/languages\/cs"
                            }
                        },
                        "_embedded": {
                            "language": {
                                "id": "cs",
                                "_links": {
                                    "self": {
                                        "href": "\/api\/languages\/cs"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

### Soft Delete a Company Administrator [DELETE]

Softly Deletes a Company Administrator with given ID.

+ Response 200 (application/hal+json)

        {
            "ok": true
        }



# Group Invoices

## Invoices Collection [/api/invoices?limit={limit}&page={page}&sort={sort}]

+ Parameters
    + limit (number, optional) - Limits number of Tests returned in the request
    + page (number, optional) - Distance from beginning of the array of available Tests
    + sort (string, optional) - Sorts the result in the given order. The format for sort is "column+ASC,column+DESC"

### List Invoices [GET]

Lists all invoices.

+ Response 200 (application/hal+json)

        {
            "_embedded": {
                "invoices": [
                    {
                        "id": 1,
                        "company_name": "Hiri",
                        "tin": "123",
                        "vatin": "123",
                        "address": "Je\u010dn\u00e1 1",
                        "city": "Praha",
                        "postal": "100 00",
                        "country": "\u010cesk\u00e1 republika",
                        "invoice_email": "filip@hiri.cz",
                        "with_vat": true,
                        "issue_date": "2016-03-04T15:34:07+0100",
                        "due_date": "2016-03-05T15:34:06+0100",
                        "variable_symbol": "123456",
                        "proforma": true,
                        "created": "2016-03-04T15:34:07+0100",
                        "sum": 15000,
                        "_links": {
                            "self": {
                                "href": "\/api\/invoices\/1"
                            },
                            "company": {
                                "href": "\/api\/companies\/1"
                            }
                        }
                    },
                    {
                        "id": 2,
                        "company_name": "Hiri",
                        "tin": "123",
                        "vatin": "123",
                        "address": "Je\u010dn\u00e1 1",
                        "city": "Praha",
                        "postal": "100 00",
                        "country": "\u010cesk\u00e1 republika",
                        "invoice_email": "filip@hiri.cz",
                        "with_vat": true,
                        "issue_date": "2016-03-04T15:34:07+0100",
                        "due_date": "2016-03-03T15:34:06+0100",
                        "variable_symbol": "123456",
                        "proforma": true,
                        "created": "2016-03-04T15:34:07+0100",
                        "sum": 15000,
                        "_links": {
                            "self": {
                                "href": "\/api\/invoices\/2"
                            },
                            "company": {
                                "href": "\/api\/companies\/2"
                            }
                        }
                    },
                    {
                        "id": 3,
                        "company_name": "Hiri",
                        "tin": "123",
                        "vatin": "123",
                        "address": "Je\u010dn\u00e1 1",
                        "city": "Praha",
                        "postal": "100 00",
                        "country": "\u010cesk\u00e1 republika",
                        "invoice_email": "filip@hiri.cz",
                        "with_vat": true,
                        "issue_date": "2016-03-04T15:34:07+0100",
                        "due_date": "2016-03-03T15:34:06+0100",
                        "variable_symbol": "123456",
                        "proforma": true,
                        "created": "2016-03-04T15:34:07+0100",
                        "sum": 15000,
                        "_links": {
                            "self": {
                                "href": "\/api\/invoices\/3"
                            },
                            "company": {
                                "href": "\/api\/companies\/1"
                            }
                        }
                    }
                ],
                "number_of_invoices": 3,
                "number_of_unpaid_invoices": 3,
                "number_of_unpaid_invoices_after_due_date": 2
            }
        }

### Create an Invoice [POST]

Creates an Invoice with given parameters.
**Note:** Only superadmins can create Invoices.

+ Request (application/json)

    + Parameters
        + payments (array, required) - Array of Payments ids.
        + company (number, required) - ID of Company for which you are issuing the Invoice.
        + due_date (string, required) - Due date
        + issue_date (string, required) - Issue date
        + variable_symbol (string, required) - Variable symbol of the Invoice
        + proforma (boolean, required) - Is the Invoice a proforma? Default value is false.
        + company_name (string, optional) - Name of the Company, will be filled from Invoice Details if not sent.
        + tin (string, optional) - TIN/IČO of the Company, will be filled from Invoice Details if not sent.
        + vatin (string, optional) - VATIN/DIČ of the Company, will be filled from Invoice Details if not sent.
        + address (string, optional) - Address of the Company, will be filled from Invoice Details if not sent.
        + city (string, optional) - City of the Company, will be filled from Invoice Details if not sent.
        + postal (string, optional) - Postal code of the Company, will be filled from Invoice Details if not sent.
        + country (string, optional) - Country of the Company, will be filled from Invoice Details if not sent.
        + invoice_email (string, optional) - Email to which invoices will be sent, will be filled from Invoice Details if not sent.
        + with_vat (boolean, optional) - Is the Company a VAT payer? Will be filled from Invoice Details if not sent.
        + sum (number, required) - Sum of the invoice

    + Body

            {
                "payments": [1],
                "company": 1,
                "due_date": "2016-03-17",
                "issue_date": "2016-03-03",
                "variable_symbol": "123456",
                "proforma": false,
                "sum": 15000
            }

+ Response 201 (application/hal+json)

        {
            "ok": true,
            "inserted": {
                "id": 8,
                "company_name": "Hiri",
                "tin": "123",
                "vatin": "123",
                "address": "Je\u010dn\u00e1 1",
                "city": "Praha",
                "postal": "100 00",
                "country": "\u010cesk\u00e1 republika",
                "invoice_email": "filip@hiri.cz",
                "with_vat": true,
                "issue_date": "2016-03-03T00:00:00+0100",
                "due_date": "2016-03-17T00:00:00+0100",
                "variable_symbol": "123456",
                "proforma": false,
                "created": "2016-03-04T15:34:25+0100",
                "sum": 15000,
                "_links": {
                    "self": {
                        "href": "\/api\/invoices\/8"
                    },
                    "company": {
                        "href": "\/api\/companies\/1"
                    }
                },
                "_embedded": {
                    "company": {
                        "id": 1,
                        "name": "Hiri.cz",
                        "webalized": "hiri-cz",
                        "created": "2016-03-04T15:34:25+0100",
                        "color": "ffffff",
                        "address": "Sp\u00e1len\u00e1 1",
                        "city": "Praha",
                        "country": "\u010cesk\u00e1 republika",
                        "_links": {
                            "self": {
                                "href": "\/api\/companies\/1"
                            },
                            "jobs": {
                                "href": "\/api\/jobs?company_id=1"
                            },
                            "jobs:active": {
                                "href": "\/api\/jobs?company_id=1&active=1"
                            }
                        }
                    },
                    "payments": []
                }
            }
        }

## Company's Invoices Collection [/api/companies/{company_id}/invoices?limit={limit}&page={page}&sort={sort}]

+ Parameters
    + company_id (number, required) - ID of the Company.
    + limit (number, optional) - Limits number of Tests returned in the request
    + page (number, optional) - Distance from beginning of the array of available Tests
    + sort (string, optional) - Sorts the result in the given order. The format for sort is "column+ASC,column+DESC"

### List Invoices [GET]

Lists all invoices belonging to the given Company.

+ Response 200 (application/hal+json)

        {
            "_embedded": {
                "invoices": [
                    {
                      "id": 1,
                      "company_name": "Hiri",
                      "tin": "123",
                      "vatin": "123",
                      "address": "Ječná 1",
                      "city": "Praha",
                      "postal": "100 00",
                      "country": "Česká republika",
                      "invoice_email": "filip@hiri.cz",
                      "with_vat": true,
                      "issue_date": "2016-03-02T15:34:18+0100",
                      "due_date": "2016-03-03T15:34:18+0100",
                      "variable_symbol": "123456",
                      "proforma": true,
                      "created": "2016-03-04T15:34:18+0100",
                      "sum": 165,
                      "_links": {
                      "self": {
                        "href": "/api/invoices/1"
                      },
                       "company": {
                        "href": "/api/companies/1"
                        }
                      }
                    },
                    {
                      "id": 2,
                      "company_name": "Hiri",
                      "tin": "123",
                      "vatin": "123",
                      "address": "Ječná 1",
                      "city": "Praha",
                      "postal": "100 00",
                      "country": "Česká republika",
                      "invoice_email": "filip@hiri.cz",
                      "with_vat": true,
                      "issue_date": "2016-03-04T15:34:18+0100",
                      "due_date": "2016-11-07T15:34:18+0100",
                      "variable_symbol": "669988",
                      "proforma": true,
                      "created": "2016-03-05T15:34:18+0100",
                      "sum": 65000,
                      "_links": {
                      "self": {
                        "href": "/api/invoices/1"
                      },
                       "company": {
                        "href": "/api/companies/1"
                        }
                      }
                    },
                    {
                      "id": 3,
                      "company_name": "Hiri",
                      "tin": "123",
                      "vatin": "123",
                      "address": "Ječná 1",
                      "city": "Praha",
                      "postal": "100 00",
                      "country": "Česká republika",
                      "invoice_email": "filip@hiri.cz",
                      "with_vat": true,
                      "issue_date": "2016-03-02T15:34:18+0100",
                      "due_date": "2016-03-08T15:34:18+0100",
                      "paid": "2016-03-05T15:34:18+0100",
                      "variable_symbol": "789456123",
                      "proforma": true,
                      "created": "2016-03-04T15:34:18+0100",
                      "sum": 6500000,
                      "_links": {
                      "self": {
                        "href": "/api/invoices/3"
                      },
                       "company": {
                        "href": "/api/companies/1"
                        }
                      }
                    }
                ],
                "number_of_invoices": 3,
                "number_of_unpaid_invoices": 1,
                "number_of_unpaid_invoices_after_due_date": 1
            }
        }

## Invoice [/api/invoices/{id}]

+ Attributes
    + id (number, required) - ID of the Invoice.
    + due_date (string, required) - Due date
    + issue_date (string, required) - Issue date
    + variable_symbol (string, required) - Variable symbol of the Invoice
    + proforma (boolean, required) - Is the Invoice a proforma? Default value is false.
    + company_name (string, required) - Name of the Company
    + tin (string, required) - TIN/IČO of the Company
    + vatin (string, optional) - VATIN/DIČ of the Company
    + address (string, required) - Address of the Company
    + city (string, required) - City of the Company
    + postal (string, required) - Postal code of the Company
    + country (string, required) - Country of the Company
    + invoice_email (string, required) - Email to which invoices will be sent
    + with_vat (boolean, required) - Is the Company a VAT payer?
    + paid (string, optional) - Date when the Invoice was paid. If the Invoice 'wasnt paid, this attribute is null/not present in the response.
    + sum (number, required) - Sum of the invoice
    + created (string, required) - When the Invoice was created.
    + embedded.payments (array, required) - Array of Payments ids.
    + embedded.company (number, required) - ID of Company for which you are issuing the Invoice.

+ Parameters
    + id (number, required) - ID of the Invoice.

### Retrieve an Invoice [GET]

Retrieves Invoice with given ID.

+ Response 200 (application/hal+json)

        {
            "id": 1,
            "company_name": "Hiri",
            "tin": "123",
            "vatin": "123",
            "address": "Je\u010dn\u00e1 1",
            "city": "Praha",
            "postal": "100 00",
            "country": "\u010cesk\u00e1 republika",
            "invoice_email": "filip@hiri.cz",
            "with_vat": true,
            "issue_date": "2016-03-04T15:34:40+0100",
            "due_date": "2016-03-04T15:34:40+0100",
            "variable_symbol": "123456",
            "proforma": true,
            "created": "2016-03-04T15:34:40+0100",
            "sum": 15000,
            "_links": {
                "self": {
                    "href": "\/api\/invoices\/1"
                },
                "company": {
                    "href": "\/api\/companies\/1"
                }
            },
            "_embedded": {
                "company": {
                    "id": 1,
                    "name": "Hiri.cz",
                    "webalized": "hiri-cz",
                    "created": "2016-03-04T15:34:40+0100",
                    "color": "ffffff",
                    "address": "Sp\u00e1len\u00e1 1",
                    "city": "Praha",
                    "country": "\u010cesk\u00e1 republika",
                    "_links": {
                        "self": {
                            "href": "\/api\/companies\/1"
                        },
                        "jobs": {
                            "href": "\/api\/jobs?company_id=1"
                        },
                        "jobs:active": {
                            "href": "\/api\/jobs?company_id=1&active=1"
                        }
                    }
                },
                "payments": []
            }
        }

### Update an Invoice [PUT]

Updates an Invoice with given ID.

+ Request (application/json)

    + Attributes
        + due_date (string, optional) - Due date
        + issue_date (string, optional) - Issue date
        + variable_symbol (string, optional) - Variable symbol of the Invoice
        + proforma (boolean, optional) - Is the Invoice a proforma? Default value is false.
        + company_name (string, optional) - Name of the Company, will be filled from Invoice Details if not sent.
        + tin (string, optional) - TIN/IČO of the Company, will be filled from Invoice Details if not sent.
        + vatin (string, optional) - VATIN/DIČ of the Company, will be filled from Invoice Details if not sent.
        + address (string, optional) - Address of the Company, will be filled from Invoice Details if not sent.
        + city (string, optional) - City of the Company, will be filled from Invoice Details if not sent.
        + postal (string, optional) - Postal code of the Company, will be filled from Invoice Details if not sent.
        + country (string, optional) - Country of the Company, will be filled from Invoice Details if not sent.
        + invoice_email (string, optional) - Email to which invoices will be sent, will be filled from Invoice Details if not sent.
        + paid (string, optional) - Date when the Invoice was paid.
        + with_vat (boolean, optional) - Is the Company a VAT payer? Will be filled from Invoice Details if not sent.
        + sum (number, optional) - Sum


    + Body

            {
                "tin": "123",
                "vatin": "123"
            }

+ Response 200 (application/hal+json)

        {
            "ok": true,
            "updated": {
                "id": 1,
                "company_name": "Hiri",
                "tin": "123",
                "vatin": "123",
                "address": "Je\u010dn\u00e1 1",
                "city": "Praha",
                "postal": "100 00",
                "country": "\u010cesk\u00e1 republika",
                "invoice_email": "filip@hiri.cz",
                "with_vat": true,
                "issue_date": "2016-03-04T15:35:11+0100",
                "due_date": "2016-03-04T15:35:11+0100",
                "variable_symbol": "123456",
                "proforma": true,
                "created": "2016-03-04T15:35:11+0100",
                "sum": 15000,
                "_links": {
                    "self": {
                        "href": "\/api\/invoices\/1"
                    },
                    "company": {
                        "href": "\/api\/companies\/1"
                    }
                },
                "_embedded": {
                    "company": {
                        "id": 1,
                        "name": "Hiri.cz",
                        "webalized": "hiri-cz",
                        "created": "2016-03-04T15:35:11+0100",
                        "color": "ffffff",
                        "address": "Sp\u00e1len\u00e1 1",
                        "city": "Praha",
                        "country": "\u010cesk\u00e1 republika",
                        "_links": {
                            "self": {
                                "href": "\/api\/companies\/1"
                            },
                            "jobs": {
                                "href": "\/api\/jobs?company_id=1"
                            },
                            "jobs:active": {
                                "href": "\/api\/jobs?company_id=1&active=1"
                            }
                        }
                    },
                    "payments": []
                }
            }
        }

### Delete an Invoice [DELETE]

Soflty delets Invoice with given ID.

+ Response 200 (applicaiton/hal+json)

        {
            "ok": true
        }


# Group Invoice Details

## Invoice Details [/api/invoice-details/{company_id}]

+ Attributes
    + company_name (string, required) - Name of the Company
    + tin (string, optional) - TIN/IČO of the Company
    + vatin (string, optional) - VATIN/DIČ of the Company
    + address (string, required) - Address of the Company
    + city (string, required) - City of the Company
    + postal (string, required) - Postal code of the Company
    + country (string, required) - Country of the Company
    + invoice_email (string, required) - Email to which invoices will be sent
    + with_vat (boolean, required) - Is the Company a VAT payer?
    + last_updated (string, required) - When were the Invoice Details last updated
    + debtor (string, optional) - Date when the Company was set as debtor.

+ Parameters
    + company_id (number, required) - ID of COmpany to which the Invoice Details belong.

### Retrieve Invoice Details [GET]

Retrieves Invoice Details of a Company with given ID.

+ Response 200 (application/hal+json)

        {
            "company_name": "Hiri",
            "tin": "123",
            "vatin": "123",
            "address": "Je\u010dn\u00e1 1",
            "city": "Praha",
            "postal": "100 00",
            "country": "\u010cesk\u00e1 republika",
            "invoice_email": "filip@hiri.cz",
            "with_vat": true,
            "last_updated": "2016-02-20T21:55:38+0100",
            "_links": {
                "self": {
                    "href": "\/api\/invoice-details\/1"
                }
            },
            "_embedded": {
                "company": {
                    "id": 1,
                    "name": "Hiri.cz",
                    "webalized": "hiri-cz",
                    "created": "2016-02-20T21:55:38+0100",
                    "color": "ffffff",
                    "address": "Sp\u00e1len\u00e1 1",
                    "city": "Praha",
                    "country": "\u010cesk\u00e1 republika",
                    "_links": {
                        "self": {
                            "href": "\/api\/companies\/1"
                        },
                        "jobs": {
                            "href": "\/api\/jobs?company_id=1"
                        },
                        "jobs:active": {
                            "href": "\/api\/jobs?company_id=1&active=1"
                        }
                    }
                }
            }
        }

### Update Invoice Details [PUT]

Updates Invoice Details of a Company with given ID.

+ Request (application/json)

    + Attributes
        + company_name (string, optional) - Name of the Company
        + tin (string, optional) - TIN/IČO of the Company
        + vatin (string, optional) - VATIN/DIČ of the Company
        + address (string, optional) - Address of the Company
        + city (string, optional) - City of the Company
        + postal (string, optional) - Postal code of the Company
        + country (string, optional) - Country of the Company
        + invoice_email (string, optional) - Email to which invoices will be sent
        + debtor (string, optional) - Date when the Company was set as debtor.


    + Body

            {
                "company_name": "Česká Pojišťovna a.s.",
                "invoice_email": "john.doe@example.com",
                "vatin": "CZ1234",
                "tin": "1234"
            }

+ Response 200 (application/hal+json)

        {
            "ok": true,
            "updated": {
                "company_name": "\u010cesk\u00e1 Poji\u0161\u0165ovna a.s.",
                "tin": "1234",
                "vatin": "CZ1234",
                "address": "Je\u010dn\u00e1 1",
                "city": "Praha",
                "postal": "100 00",
                "country": "\u010cesk\u00e1 republika",
                "invoice_email": "john.doe@example.com",
                "with_vat": true,
                "last_updated": "2016-02-20T21:55:54+0100",
                "_links": {
                    "self": {
                        "href": "\/api\/invoice-details\/1"
                    }
                },
                "_embedded": {
                    "company": {
                        "id": 1,
                        "name": "Hiri.cz",
                        "webalized": "hiri-cz",
                        "created": "2016-02-20T21:55:54+0100",
                        "color": "ffffff",
                        "address": "Sp\u00e1len\u00e1 1",
                        "city": "Praha",
                        "country": "\u010cesk\u00e1 republika",
                        "_links": {
                            "self": {
                                "href": "\/api\/companies\/1"
                            },
                            "jobs": {
                                "href": "\/api\/jobs?company_id=1"
                            },
                            "jobs:active": {
                                "href": "\/api\/jobs?company_id=1&active=1"
                            }
                        }
                    }
                }
            }
        }

# Group Credits Accounts

## Credits Account [/api/credits-accounts/{company_id}]

+ Attributes
    + available_balance (number, required) - Disposable balance of the account, those are the credits that can be used.
    + balance (number, required) - Total balance of the account, including credits blocked by job offers.
    + embedded.company (object, required) - Company to which the Credits Account belongs.

+ Parameters
    + company_id (number, required) - ID of the Company

### Retrieve Credits Account [GET]

Retrieves Credits Account of Company with given ID.

+ Response 200 (application/hal+json)

        {
            "id": 1,
            "available_balance": 2000,
            "balance": 178650,
            "_embedded": {
                "company": {
                    "id": 1,
                    "name": "Hiri.cz",
                    "webalized": "hiri-cz",
                    "created": "2016-02-17T18:51:08+0100",
                    "_links": {
                        "self": {
                            "href": "\/api\/companies\/1"
                        },
                        "jobs": {
                            "href": "\/api\/jobs?company_id=1"
                        },
                        "jobs:active": {
                            "href": "\/api\/jobs?company_id=1&active=1"
                        }
                    }
                }
            }
        }

# Group Credits Transactions

## Credits Account's Credits Transactions Collection [/api/credits-accounts/{credits_account_id}/credits-transactions?limit={limit}&page={page}&sort={sort}]

+ Parameters
    + credits_account_id (number, required) - Id of the Credits Account.
    + limit (number, optional) - Limits number of candidates returned in the request
    + page (number, optional) - Distance from beginning of the array of available candidates
    + sort (string, optional) - Sorts the result in the given order. The format for sort is "column+ASC,column+DESC"

### List Credits Account's Credits Transactions [GET]

Lists Credits Transaction for Credits Account with given ID.

+ Response 200 (application/hal+json)

        {
            "_embedded": {
                "credits_transactions": [
                    {
                        "id": 2,
                        "amount": -200,
                        "type": "new-cv",
                        "created": "2016-02-23T17:46:31+0100",
                        "data": {
                            "application": 1,
                            "application_name": "John Doe",
                            "job_offer": 1,
                            "job": 1
                        },
                        "_links": {
                            "self": {
                                "href": "\/api\/credits-transactions\/2"
                            }
                        },
                        "_embedded": {
                            "credits_account": {
                                "id": 1,
                                "available_balance": 123400,
                                "balance": 127400,
                                "_links": {
                                    "self": {
                                        "href": "\/api\/credits-accounts\/1"
                                    }
                                }
                            }
                        }
                    },
                    {
                        "id": 1,
                        "amount": 10000,
                        "type": "credits-purchase",
                        "created": "2016-02-23T17:46:31+0100",
                        "data": {
                            "base": 9800,
                            "bonus": 200
                        },
                        "_links": {
                            "self": {
                                "href": "\/api\/credits-transactions\/1"
                            }
                        },
                        "_embedded": {
                            "credits_account": {
                                "id": 1,
                                "available_balance": 123400,
                                "balance": 127400,
                                "_links": {
                                    "self": {
                                        "href": "\/api\/credits-accounts\/1"
                                    }
                                }
                            }
                        }
                    }
                ]
            }
        }

## Credits Transaction [/api/credits-transaction/{id}]

+ Attributes
    + id (number, required) - ID of the Credits Transaction.
    + amount (number, required) - Amount of credits.
    + type (string, required) - Type of the transaction. Can be 'credits-purchase' when a Company buys new credits, 'product-purchase' when a Company buys a product and 'new-cv', when a new Application is created.
    + created (string, required) - When the transaction was created.
    + embedded.credits_account (object, required) - The Credits Account to which the Credits Transaction belongs.

+ Parameters
    + id (number, required) - ID of the Credits Transaction.

### Retrieve Credits Transaction [GET]

Retrieves Credits Transaction with given ID.

+ Response 200 (application/hal+json)

        {
            "id": 1,
            "amount": -100,
            "type": "new-cv",
            "created": "2016-02-23T17:46:50+0100",
            "data": {
                "application": 1,
                "application_name": "John Doe",
                "job_offer_id": 1,
                "job_offer_title": {
                    "cs": "Node.js programátor",
                    "en": "Node.js programmer"
                }
            },
            "_links": {
                "self": {
                    "href": "\/api\/credits-transactions\/1"
                }
            },
            "_embedded": {
                "credits_account": {
                    "id": 1,
                    "available_balance": 123400,
                    "balance": 127400,
                    "_links": {
                        "self": {
                            "href": "\/api\/credits-accounts\/1"
                        }
                    }
                }
            }
        }


# Group Jobs

## Jobs Collection [/api/jobs?limit={limit}&page={page}&active={active}&open={open}&language={language}&sort={sort}]

### List Jobs [GET]

Retrieves a list of all jobs for your client.

**Sorting by title:** You can use "title.[language]+ASC" or "title.[language]+DESC" to sort jobs by title in given language. Concrete example
would be "/api/jobs?sort=title.en+ASC" to sort jobs by title in english ascendingly. If the job doesn't have title in the language, it counts
as empty string.

+ Parameters
    + limit (number, optional) - Limits number of jobs returned in the request
    + page (number, optional) - Distance from beginning of the array of available jobs
    + active (boolean, optional) - If true, selects only active jobs. If false, selects only inactive jobs.
    + open (boolean, optional) - If true, selects only open jobs. If false, selects only closed jobs.
    + language (string, optional) - Returns only texts in given language to save bandwidth
    + sort (string, optional) - Sorts the result in the given order. The format for sort is "[property1]+ASC,[property2]+DESC"

+ Response 200 (application/hal+json)

        {
            "page": 2,
            "limit": 1,
            "pages": 3,
            "total": 3,
            "_links": {
                "self": {
                    "href": "\/api\/jobs?page=2&limit=1"
                },
                "first": {
                    "href": "\/api\/jobs?page=1&limit=1"
                },
                "last": {
                    "href": "\/api\/jobs?page=3&limit=1"
                },
                "next": {
                    "href": "\/api\/jobs?page=3&limit=1"
                },
                "previous": {
                    "href": "\/api\/jobs?page=1&limit=1"
                }
            },
            "_embedded": {
                "number_of_jobs": 2,
                "number_of_active_jobs": 0,
                "number_of_open_jobs": 2,
                "jobs": [
                    {
                        "id": 1,
                        "created": "2015-10-16T14:42:22+0200",
                        "open_from": "2015-10-16T14:42:22+0200",
                        "open_to": "2016-02-28T17:04:52+0100",
                        "_links": {
                            "self": {
                                "href": "\/api\/jobs\/1"
                            },
                            "company": {
                                "href": "\/api\/companies\/1"
                            },
                            "candidates": {
                                "href": "\/api\/candidates?job_id=1"
                            }
                        },
                        "_embedded": {
                            "title": {
                                "cs": "Hiri.cz hledá Node.js vývojáře",
                                "en": "Hiri.cz is looking for a Node.js developer"
                            },
                            "description": {
                                "cs": "Stavíme nový pracovní portál a potřebujeme Tě!",
                                "en": "We are building a new job portal and we need you!"
                            },
                            "intro": {
                                "cs": "Vítáme Vás na testování pro pozici Node.js vývojáře.",
                                "en": "Welcome to tests for Node.js developer position."
                            },
                            "state": "open",
                            "number_of_candidates": 20,
                            "number_of_completed_candidates": 11,
                            "number_of_tests": 5
                        }
                    },
                    {
                        "id": 2,
                        "created": "2015-08-20T14:42:22+0200",
                        "open_from": "2015-09-14T14:42:22+0200",
                        "open_to": "2016-02-28T17:04:52+0100",
                        "_links": {
                            "self": {
                                "href": "\/api\/jobs\/2"
                            },
                            "company": {
                                "href": "\/api\/companies\/1"
                            },
                            "candidates": {
                                "href": "\/api\/candidates?job_id=2"
                            }
                        },
                        "_embedded": {
                            "title": {
                                "cs": "Hiri.cz hledá HTML kodera",
                                "en": "Hiri.cz is looking for a HTML coder"
                            },
                            "description": {
                                "cs": "Stavíme nový pracovní portál a potřebujeme Tě!",
                                "en": "We are building a new job portal and we need you!"
                            },
                            "intro": {
                                "cs": "Vítáme Vás na testování pro pozici HTML kodéra.",
                                "en": "Welcome to tests for HTML coder position."
                            },
                            "state": "closed",
                            "number_of_candidates": 4,
                            "number_of_completed_candidates": 2,
                            "number_of_tests": 3
                        }
                    },
                    {
                        "id": 3,
                        "created": "2014-08-20T14:42:22+0200",
                        "open_from": "2015-09-14T14:42:22+0200",
                        "open_to": "2020-02-28T17:04:52+0100",
                        "_links": {
                            "self": {
                                "href": "\/api\/jobs\/2"
                            },
                            "company": {
                                "href": "\/api\/companies\/1"
                            },
                            "candidates": {
                                "href": "\/api\/candidates?job_id=2"
                            }
                        },
                        "_embedded": {
                            "title": {
                                "cs": "žumpár/potápač",
                                "en": "waste/skin-diver"
                            },
                            "description": {
                                "cs": "Stavíme nový pracovní portál a potřebujeme Tě!",
                                "en": "We are building a new job portal and we need you!"
                            },
                            "intro": {
                                "cs": "Vítáme Vás na testování pro pozici HTML kodéra.",
                                "en": "Welcome to tests for HTML coder position."
                            },
                            "state": "open",
                            "number_of_candidates": 6,
                            "number_of_completed_candidates": 4,
                            "number_of_tests": 2
                        }
                    }
                ]
            }
        }

### Create a New Job [POST]

Allows you to create a new Job. You have to provide all parameters and each
text must be provided in all languages your Client supports.

+ Request (application/json)

    + Attributes
        + company (number, required) - Id of the company to which the Job will belong
        + title (object, required) - Object of Job titles for languages
        + intro (object, required) - Object of Job intros for languages
        + description (object, required) - Object of Job descriptions for languages
        + open_from (string, optional) - Date from which the Job will be opened for testing
        + open_to (string, optional) - Date to which the Job will be opened for testing
        + can_candidate_use_other_cute_languages (boolean, optional) - Can Candidate filling CuteTests select InstrumentLanguage or does he have to use the CuteTest default one?
        + tests (array, optional) - Ids of Tests which will make the test set for this Job.
        + cute_tests (array, optional) - Ids of Cute Tests which will make the test set for this Job.

    + Body

            {
                "company": 1,
                "title": {
                    "cs": "Hiri.cz hledá Node.js vývojáře",
                    "en": "Hiri.cz is looking for a Node.js developer"
                },
                "description": {
                    "cs": "Stavíme nový pracovní portál a potřebujeme Tě!",
                    "en": "We are building a new job portal and we need you!"
                },
                "intro": {
                    "cs": "Vítáme Vás na testování pro pozici Node.js vývojáře.",
                    "en": "Welcome to tests for Node.js developer position."
                },
                "tests": [1, 2],
                "cute_tests": [1, 2]
            }

+ Response 201 (application/hal+json)

    + Headers

            Location: /jobs/7c1ea1b5-2b52-4b44-8c1c-93a61d3e3571

    + Body

            {
                "ok": true,
                "inserted": {
                    "id": 1,
                    "created": "2015-10-16T14:39:05+0200",
                    "open_from": "2015-09-11T11:11:11+0200",
                    "open_to": "2016-02-28T17:04:52+0100",
                    "_links": {
                        "self": {
                            "href": "\/api\/jobs\/1"
                        },
                        "company": {
                            "href": "\/api\/companies\/1"
                        },
                        "candidates": {
                            "href": "\/api\/candidates?job_id=1"
                        }
                    },
                    "_embedded": {
                        "title": {
                            "cs": "Hledáme Node.js developera",
                            "en": "We are looking for a Node.js developer"
                        },
                        "description": {
                            "cs": "Podídlej se na výdvoji nového pracovního portálu, který změní český trh s prací.",
                            "en": "Help us build a revolutionary job portal!"
                        },
                        "intro": {
                            "cs": "Vítáme Vás na testování pro pozici Node.js vývojáře.",
                            "en": "Welcome to tests for Node.js developer position."
                        },
                        "state": "open",
                        "number_of_candidates": 0,
                        "number_of_completed_candidates": 0,
                        "number_of_tests": 0
                    }
                }
            }

## Company's Jobs Collection [/api/companies/{company_id}/jobs]

+ Parameters
    + company_id (number, optional) - Id of the company which the jobs belongs to

### Retrieve Company's Jobs [GET]

Retrieves Jobs belonging to the Company with the given ID.

+ Response 200 (application/hal+json)

        {
            "_embedded": {
                "jobs": [
                    {
                        "id": 2,
                        "created": "2015-10-25T17:04:52+0100",
                        "open_from": "2015-10-25T17:04:52+0100",
                        "open_to": "2016-02-28T17:04:52+0100",
                        "_links": {
                            "self": {
                                "href": "\/api\/jobs\/2"
                            },
                            "company": {
                                "href": "\/api\/companies\/1"
                            },
                            "candidates": {
                                "href": "\/api\/candidates?job_id=2"
                            }
                        },
                        "_embedded": {
                            "title": {
                                "cs": "Hiri.cz hledá Node.js vývojáře",
                                "en": "Hiri.cz is looking for a Node.js developer"
                            },
                            "description": {
                                "cs": "Stavíme nový pracovní portál a potřebujeme Tě!",
                                "en": "We are building a new job portal and we need you!"
                            },
                            "intro": {
                                "cs": "Vítáme Vás na testování pro pozici Node.js vývojáře.",
                                "en": "Welcome to tests for Node.js developer position."
                            },
                            "state": "open",
                            "number_of_candidates": 20,
                            "number_of_completed_candidates": 11,
                            "number_of_tests": 5
                        }
                    },
                    {
                        "id": 1,
                        "created": "2015-10-25T17:04:52+0100",
                        "open_from": "2016-02-01T17:04:52+0100",
                        "open_to": "2016-03-01T17:04:52+0100",
                        "_links": {
                            "self": {
                                "href": "\/api\/jobs\/1"
                            },
                            "company": {
                                "href": "\/api\/companies\/1"
                            },
                            "candidates": {
                                "href": "\/api\/candidates?job_id=1"
                            }
                        },
                        "_embedded": {
                            "title": {
                                "cs": "Hiri.cz hledá HTML kodera",
                                "en": "Hiri.cz is looking for a HTML coder"
                            },
                            "description": {
                                "cs": "Stavíme nový pracovní portál a potřebujeme Tě!",
                                "en": "We are building a new job portal and we need you!"
                            },
                            "intro": {
                                "cs": "Vítáme Vás na testování pro pozici HTML kodéra.",
                                "en": "Welcome to tests for HTML coder position."
                            },
                            "state": "closed",
                            "number_of_candidates": 4,
                            "number_of_completed_candidates": 2,
                            "number_of_tests": 3
                        }
                    }
                ],
                "number_of_jobs": 2,
                "number_of_active_jobs": 0,
                "number_of_open_jobs": 2
            }
        }

## Job [/api/jobs/{id}]


A job is open when `open_from <= now` and `open_to >= now`.

A job is active when `valid_to >= now` and `approved <= now`.

+ Attributes
    + id (number, required) - Id of the Job in UUIDv4 format
    + created (string, required) - Date when the Job was created in ISO8601 format
    + open_from (string, optional) - Date from which the Job is open for hiring
    + open_to (string, optional) - Date to which the Job is open for hiring
    + embedded.title (object, required) - Job titles in different languages
    + embedded.description (object, required) - Job descriptions in different languages
    + embedded.state (string, required) - Job's state - "open" for aon open job, or "closed" for closed job
    + embedded.number_of_candidates (number, required) - Number of Candidates for this Job
    + embedded.number_of_completed_candidates (number, required) - Number of Candidates for the Job who completed all the tests
    + embedded.number_of_tests (number, required) - Number of Tests and Cute Tests assigned to the Job.


+ Parameters
    + id (number, required) - Id of the Job in UUIDv4 format

### Retrieve a Job [GET]

Retrieves a Job with provided id with texts in all languages.

+ Response 200 (application/json)

        {
            "id": 1,
            "created": "2015-10-16T14:39:09+0200",
            "open_from": "2015-10-15T14:39:09+0200",
            "open_to": "2016-02-28T14:39:09+0200",
            "_links": {
                "self": {
                    "href": "\/api\/jobs\/1"
                },
                "company": {
                    "href": "\/api\/companies\/1"
                },
                "candidates": {
                    "href": "\/api\/candidates?job_id=1"
                }
            },
            "_embedded": {
                "title": {
                    "cs": "Hledáme Node.js developera",
                    "en": "We are looking for a Node.js developer"
                },
                "description": {
                    "cs": "Podídlej se na výdvoji nového pracovního portálu, který změní český trh s prací.",
                    "en": "Help us build a revolutionary job portal!"
                },
                "intro": {
                    "cs": "Lorem ipsum dolor sit amet...",
                    "en": "Lorem ipsum dolor sit amet..."
                },
                "state": "open",
                "number_of_candidates": 0,
                "number_of_completed_candidates": 0,
                "number_of_in-progress_candidates": 0,
                "number_of_inactive_candidates": 0,
                "number_of_tests": 0,
                "company": {
                    "id": 1,
                    "name": "Hiri.cz",
                    "webalized": "hiri-cz",
                    "created": "2015-10-16T14:39:09+0200",
                    "_links": {
                        "self": {
                            "href": "\/api\/companies\/1"
                        },
                        "jobs": {
                            "href": "\/api\/jobs?company_id=1"
                        },
                        "jobs:active": {
                            "href": "\/api\/jobs?company_id=1&active=1"
                        }
                    }
                },
                "candidates": []
            }
        }

### Update a Job [PUT]

Updates a Job with provided ID. You don't have to provide all the parameters,
only those provided will be updated.

Note: we chose usability over RESTful corectness, where you have to provide all
the parameters in PUT request otherwise they are deleted.

+ Request (application/json)

    + Attributes
        + company (number, required) - Id of the company to which the Job will belong
        + title (object, required) - Object of Job titles for languages
        + intro (object, required) - Object of Job intros for languages
        + description (object, required) - Object of Job descriptions for languages
        + open_from (string, optional) - Date from which the Job will be opened for testing
        + open_to (string, optional) - Date to which the Job will be opened for testing
        + can_candidate_use_other_cute_languages (boolean, optional) - Can Candidate filling CuteTests select InstrumentLanguage or does he have to use the CuteTest default one?
        + tests (array, optional) - Ids of Tests which will make the test set for this Job. Note that all tests get removed and then the new set is assigned.
        + cute_tests (array, optional) - Ids of Cute Tests which will make the test set for this Job. Note that all cute tests get removed and then the new set is assigned.

    + Body

            {
                "title": {
                    "cs": "Hiri.cz hledá Node.js vývojáře",
                    "en": "Hiri.cz is looking for a Node.js developer"
                },
                "description": {
                    "cs": "Stavíme nový pracovní portál a potřebujeme Tě!",
                    "en": "We are building a new job portal and we need you!"
                },
                "tests": [1, 2, 3],
                "cute_tests": [1, 2, 3]
            }

+ Response 200 (application/hal+json)
        
        {
            "ok": true,
            "updated": {
                "id": 1,
                "created": "2015-10-16T14:39:14+0200",
                "open_from": "2015-10-15T14:39:09+0200",
                "open_to": "2016-02-28T14:39:09+0200",
                "_links": {
                    "self": {
                        "href": "\/api\/jobs\/1"
                    },
                    "company": {
                        "href": "\/api\/companies\/2"
                    },
                    "candidates": {
                        "href": "\/api\/candidates?job_id=1"
                    }
                },
                "_embedded": {
                    "title": {
                        "cs": "Hiri.cz hledá Node.js vývojáře",
                        "en": "Hiri.cz is looking for a Node.js developer"
                    },
                    "description": {
                        "cs": "Stavíme nový pracovní portál a potřebujeme Tě!",
                        "en": "We are building a new job portal and we need you!"
                    },
                    "intro": {
                        "cs": "Vítáme Vás na testování pro pozici Node.js vývojáře.",
                        "en": "Welcome to tests for Node.js developer position."
                    },
                    "state": "closed",
                    "number_of_candidates": 0,
                    "number_of_completed_candidates": 0,
                    "number_of_tests": 0
                }
            }
        }

### Hide a Job [DELETE]

Sets Job as hidden.

+ Response 200 (applicaiton/hal+json)

        {
            "ok": true
        }


# Group Job Offer Budgets

## Job Offer Budgets Collection [/api/job-offer-budgets?limit={limit}&page={page}&sort={sort}]

+ Parameters
    + limit (number, optional) - Limits number of jobs returned in the request
    + page (number, optional) - Distance from beginning of the array of available jobs
    + sort (string, optional) - Sorts the result in the given order. The format for sort is "column+ASC,column+DESC"

### Create Job Offer Budget [POST]

Creates a Job Offer Budget with given parameters.

+ Request (application/json)

    + Attributes
        + job_offer (number, required) - ID of the Job offer
        + price_per_c_v (number, required) - Price per CV, must be equal or greater than the JobCategory CV Price
        + total_budget (number, required) - Total budget, must be a multiple of the price_per_c_v
        + currency (string, required) - ID of Currency in which the prices are
        + type (string, optional) - Type of the JobOfferBudget. Can be 'blocking' for credits blockage or 'non-blocking' for monthly invoice.

    + Body

            {
                "job_offer": 1,
                "price_per_c_v": 400,
                "total_budget": 4000,
                "currency": "CZK",
                "type": "blocking"
            }

+ Response 201 (application/hal+json)

        {
            "ok": true,
            "inserted": {
                "id": 2,
                "price_per_c_v": 400,
                "total_budget": 4000,
                "type": "blocking",
                "_links": {
                    "self": {
                        "href": "\/api\/job-offer-budgets\/2"
                    },
                    "currency": {
                        "href": "\/api\/currencies\/CZK"
                    }
                },
                "_embedded": {
                    "currency": {
                        "id": "CZK",
                        "_links": {
                            "self": {
                                "href": "\/api\/currencies\/CZK"
                            }
                        },
                        "_embedded": {
                            "title": []
                        }
                    }
                }
            }
        }

## Job Offer's Budgets Collection [/api/job-offer/{job_offer_id}/job-offer-budgets?limit={limit}&page={page}&sort={sort}]

+ Parameters
    + job_offer_id (number, optional) - ID of the Job Offer.
    + limit (number, optional) - Limits number of jobs returned in the request
    + page (number, optional) - Distance from beginning of the array of available jobs
    + sort (string, optional) - Sorts the result in the given order. The format for sort is "column+ASC,column+DESC"

### List Job Offer's Budgets [GET]

Lists Job Offer's Budgets.

+ Response 200 (application/hal+json)

        {
            "_embedded": {
                "job_offer_budgets": [
                    {
                        "id": 1,
                        "price_per_c_v": 400,
                        "total_budget": 4000,
                        "_links": {
                            "self": {
                                "href": "\/api\/job-offer-budgets\/1"
                            },
                            "currency": {
                                "href": "\/api\/currencies\/CZK"
                            }
                        },
                        "_embedded": {
                            "currency": {
                                "id": "CZK",
                                "_links": {
                                    "self": {
                                        "href": "\/api\/currencies\/CZK"
                                    }
                                },
                                "_embedded": {
                                    "title": []
                                }
                            }
                        }
                    }
                ]
            }
        }

## Job Offer Budget [/api/job-offer-budgets/{id}]

+ Attributes
    + id (number, required) - ID of the Job Offer Budget
    + price_per_c_v (number, required) - Price per CV
    + total_budget (number, required) - Total Budget
    + type (string, optional) - Type of the JobOfferBudget. Can be 'blocking' for credits blockage or 'non-blocking' for monthly invoice.
    + _embedded.currency (object, required) - Currency of the Budget

+ Parameters
    + id (number, required) - ID of the Job Offer Budget

### Retrieve Job Offer Budget [GET]

Retrieves Job Offer Budget with given ID.

+ Response 200 (application/json)

        {
            "id": 1,
            "price_per_c_v": 400,
            "total_budget": 4000,
            "_links": {
                "self": {
                    "href": "\/api\/job-offer-budgets\/1"
                },
                "currency": {
                    "href": "\/api\/currencies\/CZK"
                }
            },
            "_embedded": {
                "currency": {
                    "id": "CZK",
                    "_links": {
                        "self": {
                            "href": "\/api\/currencies\/CZK"
                        }
                    },
                    "_embedded": {
                        "title": []
                    }
                }
            }
        }

### Update Job Offer Budget [PUT]

Updates Job Offer Budget with given ID.

+ Request (application/json)

    + Attributes
        + job_offer (number, required) - ID of the Job offer
        + price_per_c_v (number, required) - Price per CV, must be equal or greater than the JobCategory CV Price
        + total_budget (number, required) - Total budget, must be a multiple of the price_per_c_v
        + currency (string, required) - ID of Currency in which the prices are
        + type (string, optional) - Type of the JobOfferBudget. Can be 'blocking' for credits blockage or 'non-blocking' for monthly invoice.

    + Body

            {
                "job_offer": 1,
                "price_per_c_v": 400,
                "total_budget": 4000,
                "currency": "CZK",
                "type": "blocking"
            }

+ Response 200 (application/hal+json)

        {
            "ok": true,
            "updated": {
                "id": 2,
                "price_per_c_v": 400,
                "total_budget": 4000,
                "type": "blocking",
                "_links": {
                    "self": {
                        "href": "\/api\/job-offer-budgets\/2"
                    },
                    "currency": {
                        "href": "\/api\/currencies\/CZK"
                    }
                },
                "_embedded": {
                    "currency": {
                        "id": "CZK",
                        "_links": {
                            "self": {
                                "href": "\/api\/currencies\/CZK"
                            }
                        },
                        "_embedded": {
                            "title": []
                        }
                    }
                }
            }
        }



# Group Mail Templates

## Mail Templates Collection [/api/mail-templates?limit={limit}&page={page}&sort={sort}]

+ Parameters
    + limit (number, optional) - Limits number of jobs returned in the request
    + page (number, optional) - Distance from beginning of the array of available jobs
    + sort (string, optional) - Sorts the result in the given order. The format for sort is "column+ASC,column+DESC"


### List Mail Templates [GET]

Retrieves all Mail Templates.

+ Response 200 (application/hal+json)

        {
            "_embedded": {
                "mail_templates": [
                    {
                        "created": "2015-10-09T15:49:03+0200",
                        "title": "V\u00fdchoz\u00ed \u0161ablona",
                        "text": "V\u00e1\u017een\u00fd [osloven\u00ed], ...",
                        "id": 1,
                        "_links": {
                            "self": {
                                "href": "\/api\/mail-templates\/1"
                            }
                        },
                        "_embedded": {
                            "jobs": [
                                {
                                    "id": 1,
                                    "_embedded": {
                                        "title": {
                                            "cs": "Hledáme PHP programátora",
                                            "en": "We are looking for a PHP programmer"
                                        }
                                    }
                                },
                                {
                                    "id": 2,
                                    "_embedded": {
                                        "title": {
                                            "cs": "Chceme sem Node.js dev",
                                            "en": "Lookin 4 Node.js dev"
                                        }
                                    }
                                }
                            ],
                            "company": {
                                "id": 1,
                                "name": "Hiri.cz",
                                "webalized": "hiri-cz",
                                "created": "2015-11-20T17:32:08+0100",
                                "_links": {
                                    "self": {
                                        "href": "\/api\/companies\/1"
                                    },
                                    "jobs": {
                                        "href": "\/api\/jobs?company_id=1"
                                    },
                                    "jobs:active": {
                                        "href": "\/api\/jobs?company_id=1&active=1"
                                    }
                                }
                            }
                        }
                    },
                    {
                        "created": "2015-10-09T15:49:03+0200",
                        "title": "Sablona pro vsechny moje jobiky",
                        "text": "V\u00e1\u017een\u00fd [osloven\u00ed], ...",
                        "id": 2,
                        "for_all_jobs": true,
                        "_links": {
                            "self": {
                                "href": "\/api\/mail-templates\/2"
                            }
                        }
                    }
                ]
            }
        }

### Create a Mail Template [POST]

Creates a Mail Template with given data.

If you want to create a mail template for all jobs, set "jobs" parameter to "all" instead of an array.

+ Request (application/json)

        {
            "jobs": [
              "1"
            ],
            "company": "aaaaaaaa-aaaa-aaaa-aaaaaaaaaaaa",
            "title": "Výchozí šablona",
            "text": "Vážený [oslovení], ..."
        }

+ Response 201 (application/hal+json)

        {
            "ok": true,
            "inserted": {
                "created": "2015-10-09T15:49:04+0200",
                "title": "Nova sablona",
                "text": "V\u00e1\u017een\u00fd [osloven\u00ed], ...",
                "id": 17,
                "for_all_jobs": false,
                "_links": {
                    "self": {
                        "href": "\/api\/mail-templates\/17"
                    }
                },
                "_embedded": {
                    "jobs": [
                        {
                            "id": 1,
                            "_embedded": {
                                "title": {
                                    "cs": "Hledáme PHP programátora",
                                    "en": "We are looking for a PHP programmer"
                                }
                            }
                        }
                    ],
                    "company": {
                        "id": 1,
                        "name": "Hiri.cz",
                        "webalized": "hiri-cz",
                        "created": "2015-11-20T17:32:08+0100",
                        "_links": {
                            "self": {
                                "href": "\/api\/companies\/1"
                            },
                            "jobs": {
                                "href": "\/api\/jobs?company_id=1"
                            },
                            "jobs:active": {
                                "href": "\/api\/jobs?company_id=1&active=1"
                            }
                        }
                    }
                }
            }
        }

+ Response 400 (application/problem+json)

        {
            "errors": [
                [
                    "Job with ID \"2\" does not exist."
                ]
            ],
            "title": "There was a validation error.",
            "type": "https://api.hiri.com/problem/validation_error",
            "status": 400,
            "detail": "You have provided invalid data."
        }

## Company's Mail Templates Collection [/api/companies/{company_id}/mail-templates?page={page}&limit={limit}&sort={sort}]

+ Parameters
    + company_id (number, required) - Id of the Company
    + limit (number, optional) - Limits number of jobs returned in the request
    + page (number, optional) - Distance from beginning of the array of available jobs
    + sort (string, optional) - Sorts the result in the given order. The format for sort is "column+ASC,column+DESC"

### List Company's Mail Templates [GET]

Retrieves Mail Templates which belong to the given Company.

+ Response 200 (application/hal+json)

        {
            "_embedded": {
                "mail_templates": [
                    {
                        "for_all_jobs": false,
                        "created": "2015-10-15T17:15:36+0200",
                        "title": "Výchozí šablona 1",
                        "text": "Vážený pane [oslovené], lorem ipsum ...",
                        "id": 1,
                        "_links": {
                            "self": {
                                "href": "\/api\/mail-templates\/1"
                            }
                        },
                        "_embedded": {
                            "jobs": [
                                {
                                    "id": 1,
                                    "_embedded": {
                                        "title": {
                                            "cs": "Hledáme Node.js developera"
                                        }
                                    }
                                }
                            ],
                            "company": {
                                "id": 1,
                                "name": "Hiri.cz",
                                "webalized": "hiri-cz",
                                "created": "2015-11-20T17:32:08+0100",
                                "_links": {
                                    "self": {
                                        "href": "\/api\/companies\/1"
                                    },
                                    "jobs": {
                                        "href": "\/api\/jobs?company_id=1"
                                    },
                                    "jobs:active": {
                                        "href": "\/api\/jobs?company_id=1&active=1"
                                    }
                                }
                            }
                        }
                    },
                    {
                        "for_all_jobs": true,
                        "created": "2015-10-15T17:15:36+0200",
                        "title": "Výchozí šablona 2",
                        "text": "Vážený pane [oslovení], dolor sit amet...",
                        "id": 2,
                        "_links": {
                            "self": {
                                "href": "\/api\/mail-templates\/2"
                            }
                        },
                        "_embedded": {
                            "company": {
                                "id": 1,
                                "name": "Hiri.cz",
                                "webalized": "hiri-cz",
                                "created": "2015-11-20T17:32:08+0100",
                                "_links": {
                                    "self": {
                                        "href": "\/api\/companies\/1"
                                    },
                                    "jobs": {
                                        "href": "\/api\/jobs?company_id=1"
                                    },
                                    "jobs:active": {
                                        "href": "\/api\/jobs?company_id=1&active=1"
                                    }
                                }
                            }
                        }
                    }
                ]
            }
        }

## Job's Mail Templates Collection [/api/jobs/{job_id}/mail-templates?page={page}&limit={limit}&sort={sort}]

+ Parameters
    + job_id (number, required) - Id of the Job
    + limit (number, optional) - Limits number of jobs returned in the request
    + page (number, optional) - Distance from beginning of the array of available jobs
    + sort (string, optional) - Sorts the result in the given order. The format for sort is "column+ASC,column+DESC"

### List Job's Mail Templates [GET]

Retrieves Mail Templates which belong to the given Job.

+ Response 200 (application/hal+json)

        {
            "_embedded": {
                "mail_templates": [
                    {
                        "for_all_jobs": false,
                        "created": "2015-10-15T17:15:35+0200",
                        "title": "V\u00fdchoz\u00ed \u0161ablona 1",
                        "text": "V\u00e1\u017een\u00fd [osloven\u00ed], lorem ipsum ...",
                        "id": 1,
                        "_links": {
                            "self": {
                                "href": "\/api\/mail-templates\/1"
                            }
                        },
                        "_embedded": {
                            "jobs": [
                                {
                                    "id": 1,
                                    "_embedded": {
                                        "title": {
                                            "cs": "Hledáme Node.js developera"
                                        }
                                    }
                                }
                            ],
                            "company": {
                                "id": 1,
                                "name": "Hiri.cz",
                                "webalized": "hiri-cz",
                                "created": "2015-11-20T17:32:08+0100",
                                "_links": {
                                    "self": {
                                        "href": "\/api\/companies\/1"
                                    },
                                    "jobs": {
                                        "href": "\/api\/jobs?company_id=1"
                                    },
                                    "jobs:active": {
                                        "href": "\/api\/jobs?company_id=1&active=1"
                                    }
                                }
                            }
                        }
                    },
                    {
                        "for_all_jobs": true,
                        "created": "2015-10-15T17:15:35+0200",
                        "title": "V\u00fdchoz\u00ed \u0161ablona 2",
                        "text": "V\u00e1\u017een\u00fd [osloven\u00ed], dolor sit amet ...",
                        "id": 2,
                        "_links": {
                            "self": {
                                "href": "\/api\/mail-templates\/2"
                            }
                        },
                        "_embedded": {
                            "company": {
                                "id": 1,
                                "name": "Hiri.cz",
                                "webalized": "hiri-cz",
                                "created": "2015-11-20T17:32:08+0100",
                                "_links": {
                                    "self": {
                                        "href": "\/api\/companies\/1"
                                    },
                                    "jobs": {
                                        "href": "\/api\/jobs?company_id=1"
                                    },
                                    "jobs:active": {
                                        "href": "\/api\/jobs?company_id=1&active=1"
                                    }
                                }
                            }
                        }
                    }
                ]
            }
        }

## Mail Template [/api/mail-templates/{id}]

+ Parameters
    + id (number, required) - Id of the mail template

+ Attributes
    + id (number, required) - Id of the mail template
    + for_all_jobs (boolean, required) - Is the Mail Template dedicated for all Jobs of the Company, to which it belongs?
    + created (string, required) - Date when the Mail Template was created.
    + title (string, required) - Title/subject of the email.
    + text (string, required) - Text of the email.
    + embedded.jobs (array, required) - List of the Jobs to which the Mail Template is dedicated. Can be empty if for_all_jobs is true.
    + embedded.company (object, required) - Company to which the Mail Template belongs.
    
### Retrieve a Mail Template [GET]

Retrieves a Mail Template with the given id.

+ Response 200 (application/hal+json)

        {
            "created": "2015-10-09T15:49:04+0200",
            "title": "Výchozí šablona",
            "text": "Vážený [oslovení], ...",
            "id": 1,
            "for_all_jobs": false,
            "_links": {
                "self": {
                    "href": "\/api\/mail-templates\/1"
                }
            },
            "_embedded": {
                "jobs": [
                    {
                        "id": 1,
                        "_embedded": {
                            "title": {
                                "cs": "Hledáme PHP programátora",
                                "en": "We are looking for a PHP programmer"
                            }
                        }
                    }
                ],
                "company": {
                    "id": 1,
                    "name": "Hiri.cz",
                    "webalized": "hiri-cz",
                    "created": "2015-11-20T17:32:08+0100",
                    "_links": {
                        "self": {
                            "href": "\/api\/companies\/1"
                        },
                        "jobs": {
                            "href": "\/api\/jobs?company_id=1"
                        },
                        "jobs:active": {
                            "href": "\/api\/jobs?company_id=1&active=1"
                        }
                    }
                }
            }
        }

+ Response 404 (application/problem+json)

        {
            "title": "Your request is invalid.",
            "type": "https://api.hiri.com/problem/bad_request",
            "status": 404,
            "detail": "Mail template with given id does not exist."
        }

### Update a Mail Template [PUT]

Updates a Mail Template with the given id.
To update the jobs, you need to provide all the jobs the mail template now should belong to. Any previous job association will be removed.

+ Request (application/json)

        {
            "jobs": [
              "1",
              "2"
            ],
            "title": "Jiná šablona",
            "text": "Ahojte, ..."
        }

+ Response 200 (application/hal+json)

        {
            "ok": true,
            "updated": {
                "created": "2015-10-09T15:49:08+0200",
                "title": "Jiná šablona",
                "text": "Ahojte, ...",
                "id": 1,
                "for_all_jobs": false,
                "_links": {
                    "self": {
                        "href": "\/api\/mail-templates\/1"
                    }
                },
                "_embedded": {
                    "jobs": [
                        {
                            "id": 1,
                            "_embedded": {
                                "title": {
                                    "cs": "Hledáme PHP programátora",
                                    "en": "We are looking for a PHP programmer"
                                }
                            }
                        },
                        {
                            "id": 2,
                            "_embedded": {
                                "title": {
                                    "cs": "Hledáme HTML kodera",
                                    "en": "We are looking for a HTML coder"
                                }
                            }
                        }
                    ],
                "company": {
                    "id": 1,
                    "name": "Hiri.cz",
                    "webalized": "hiri-cz",
                    "created": "2015-11-20T17:32:08+0100",
                    "_links": {
                        "self": {
                            "href": "\/api\/companies\/1"
                        },
                        "jobs": {
                            "href": "\/api\/jobs?company_id=1"
                        },
                        "jobs:active": {
                            "href": "\/api\/jobs?company_id=1&active=1"
                        }
                    }
                }
                }
            }
        }

### Softly delete Mail Template [DELETE]

Softly deletes Mail Template with given ID.

+ Response 200 (application/hal+json)

        {"ok": true}



# Group Payments

## Payments Collection [/api/payments?limit={limit}&page={page}&sort={sort}]

+ Parameters
    + limit (number, optional) - Limits number of Tests returned in the request
    + page (number, optional) - Distance from beginning of the array of available Tests
    + sort (string, optional) - Sorts the result in the given order. The format for sort is "column+ASC,column+DESC"

### List Payments [GET]

Lists all Payments.

+ Response 200 (application/json)

        {
            "_embedded": {
                "payments": [
                    {
                        "id": 1,
                        "type": "card",
                        "created": "2016-03-03T16:10:15+0100",
                        "_links": {
                            "self": {
                                "href": "\/api\/payments\/1"
                            },
                            "company": {
                                "href": "\/api\/companies\/1"
                            }
                        }
                    },
                    {
                        "id": 2,
                        "type": "card",
                        "created": "2016-03-03T16:10:15+0100",
                        "_links": {
                            "self": {
                                "href": "\/api\/payments\/2"
                            },
                            "company": {
                                "href": "\/api\/companies\/2"
                            }
                        }
                    }
                ]
            }
        }

### Create a Payment [POST]

Creates Payment with given Parameters.

+ Request (application/json)

    + Attributes
        + orders (array, required) - Array with IDs of the Orders for hich you are creating the Payment.
        + type (string, required) - Type of the Payment. Can be 'card' for upfront card payment, 'invoice' for payment on invoice or 'credits' for full credits payment.
        + company (number, required) - ID of the Company.
        + return_url (string, optional) - Return URL to which the user will be redirected after paying. **Required for type 'card' payments.**
        + currency (string, optional) - Currency fot the credits, required if credits_amount is present.

    + Body

            {
                "orders": [1],
                "type": "card",
                "company": 1,
                "return_url": "https://www.example.com/card-payment-landing",
                "currency": "CZK"
            }

+ Response 201 (application/hal+json)

        {
            "ok": true,
            "inserted": {
                "id": 10,
                "type": "card",
                "created": "2016-03-03T16:10:30+0100",
                "amount": 12000,
                "vat_amount": 2500,
                "total_amount": 14500,
                "return_url": "https:\/\/www.example.com\/",
                "go_pay_id": 3028827581,
                "go_pay_state": "CREATED",
                "_links": {
                    "self": {
                        "href": "\/api\/payments\/10"
                    },
                    "company": {
                        "href": "\/api\/companies\/1"
                    }
                },
                "_embedded": {
                    "company": {
                        "id": 1,
                        "name": "Hiri.cz",
                        "webalized": "hiri-cz",
                        "created": "2016-03-03T16:10:30+0100",
                        "color": "ffffff",
                        "address": "Sp\u00e1len\u00e1 1",
                        "city": "Praha",
                        "country": "\u010cesk\u00e1 republika",
                        "_links": {
                            "self": {
                                "href": "\/api\/companies\/1"
                            },
                            "jobs": {
                                "href": "\/api\/jobs?company_id=1"
                            },
                            "jobs:active": {
                                "href": "\/api\/jobs?company_id=1&active=1"
                            }
                        }
                    },
                    "orders": [
                        {
                            "id": 1,
                            "created": "2016-03-03T16:10:30+0100",
                            "_links": {
                                "self": {
                                    "href": "\/api\/orders\/1"
                                }
                            }
                        }
                    ]
                }
            }
        }

## Company's Payments Collection [/api/companies/{company_id}/payments?limit={limit}&page={page}&sort={sort}]

+ Parameters
    + company_id (number, required) - ID of the Company.
    + limit (number, optional) - Limits number of Tests returned in the request
    + page (number, optional) - Distance from beginning of the array of available Tests
    + sort (string, optional) - Sorts the result in the given order. The format for sort is "column+ASC,column+DESC"

### List Company's Payments [GET]

Lists all Payments for given Company.

+ Response 200 (application/json)

        {
            "_embedded": {
                "payments": [
                    {
                        "id": 1,
                        "type": "card",
                        "created": "2016-03-03T16:10:23+0100",
                        "_links": {
                            "self": {
                                "href": "\/api\/payments\/1"
                            },
                            "company": {
                                "href": "\/api\/companies\/1"
                            }
                        }
                    }
                ]
            }
        }

## Payment [/api/payments/{id}]

+ Attributes
    + id (number, required) - ID of the Payment.
    + type (string, required) - Type of the Payment. Can be 'card' for upfront card payment, 'transaction' for payment on invoice or 'credits' for full credits payment.
    + created (string, required) - Date when the Payment was created.
    + paid (string, required) - Date when the Payment was paid. Is null or undefined if the Payment was not paid yet.
    + amount (string, required) - Amount to pay
    + vat_amount (string, required) - Amount of VAT to pay
    + total_amount (string, required) - Amount to pay with VAT
    + go_pay_id (string, optional) - GoPay internal ID of the payment.
    + go_pay_state (string, optional) - GoPay state of the payment.
    + return_url (string, optional) - Return URL to which the user will be redirected after paying.
    + embedded.company (object, required) - Company to which the Payment belongs.
    + embedded.orders (array, required) - Array of Orders to which the Payment belongs.
    + embedded.currency (object, required) - Currency of the Payment
    
+ Parameters
    + id (number, required) - ID of the Payment.

### Retrieve a Payment [GET]

Retrieves Payment with given ID.

+ Response 200 (application/hal+json)

        {
            "id": 1,
            "type": "card",
            "created": "2016-03-03T16:10:38+0100",
            "paid": "2016-03-03T16:13:38+0100",
            "amount": 20000,
            "vat_amount": 4200,
            "total_amount": 24200,
            "go_pay_id": "627643",
            "go_pay_state": "PAID",
            "return_url": "https:\/\/www.example.com\/",
            "_links": {
                "self": {
                    "href": "\/api\/payments\/1"
                },
                "company": {
                    "href": "\/api\/companies\/1"
                }
            },
            "_embedded": {
                "company": {
                    "id": 1,
                    "name": "Hiri.cz",
                    "webalized": "hiri-cz",
                    "created": "2016-03-03T16:10:38+0100",
                    "color": "ffffff",
                    "address": "Sp\u00e1len\u00e1 1",
                    "city": "Praha",
                    "country": "\u010cesk\u00e1 republika",
                    "_links": {
                        "self": {
                            "href": "\/api\/companies\/1"
                        },
                        "jobs": {
                            "href": "\/api\/jobs?company_id=1"
                        },
                        "jobs:active": {
                            "href": "\/api\/jobs?company_id=1&active=1"
                        }
                    }
                },
                "orders": [
                    {
                        "id": 1,
                        "created": "2016-03-03T16:10:38+0100",
                        "_links": {
                            "self": {
                                "href": "\/api\/orders\/1"
                            }
                        }
                    }
                ]
            }
        }


# Group Orders

## Orders Collection [/api/orders?limit={limit}&page={page}&sort={sort}]

+ Parameters
    + limit (number, optional) - Limits number of Tests returned in the request
    + page (number, optional) - Distance from beginning of the array of available Tests
    + sort (string, optional) - Sorts the result in the given order. The format for sort is "column+ASC,column+DESC"

### List Orders [GET]

Lists Orders.

+ Response 200 (application/hal+json)

        {
            "_embedded": {
                "orders": [
                    {
                        "id": 1,
                        "created": "2016-02-20T20:32:54+0100",
                        "sum": 15000,
                        "_links": {
                            "self": {
                                "href": "\/api\/orders\/1"
                            }
                        }
                    },
                    {
                        "id": 2,
                        "created": "2016-02-20T20:32:54+0100",
                        "sum": 15000,
                        "_links": {
                            "self": {
                                "href": "\/api\/orders\/2"
                            }
                        }
                    }
                ]
            }
        }
        


### Create an Order [POST]

Creates an Order with given parameters.

+ Request (application/json)

    + Attributes
        + company (number, required) - ID ot the Company to which the Order belongs
        + job_offer (number, optional) - ID od the Job Offer for which your are placing the Order
        + items (array[OrderItem], optional) - List of OrderItems for the Order, each must contain ID of the Product and amount of the Product
        + budget (JobOfferBudget, optional) - JobOfferBudget, requires "price_per_c_v", "total_budget" and "currency".
        + credits_amount (number, optional) - Credits amount.
        + currency (string, optional) - Currency fot the credits, required if credits_amount is present.

    + Body

            {
                "company": 1,
                "job_offer": 1,
                "items": [
                    {"product": 1, "amount": 5000},
                    {"product": 2, "amount": 1}
                ],
                "budget": {
                    "price_per_c_v": 400,
                    "total_budget": 4000,
                    "currency": "CZK"
                },
                "credits_amount": 15000,
                "currency": "CZK"
            }

+ Response 201 (application/hal+json)


        {
            "ok": true,
            "inserted": {
                "id": 1,
                "created": "2016-02-20T20:12:43+0100",
                "credits_amount": 15000,
                "credits_bonus": 150,
                "currency": "CZK",
                "sum": 5749,
                "_links": {
                    "self": {
                        "href": "\/api\/orders\/31"
                    }
                },
                "_embedded": {
                    "items": [
                        {
                            "id": 15,
                            "amount": 5000,
                            "_links": {
                                "self": {
                                    "href": "OrderItems:read"
                                }
                            },
                            "_embedded": {
                                "product": {
                                    "id": 1,
                                    "_links": {
                                        "self": {
                                            "href": "\/api\/products\/1"
                                        }
                                    },
                                    "_embedded": {
                                        "title": {
                                            "en": "PPC Campaign",
                                            "cs": "PPC Kampa\u0148"
                                        },
                                        "short_description": {
                                            "en": "We will bring more visitors to your offer by targeted campaign",
                                            "cs": "P\u0159ivedeme v\u00edce n\u00e1v\u0161t\u011bvn\u00edk\u016f na va\u0161\u00ed nab\u00eddku pomoc\u00ed c\u00edlen\u00e9 kampan\u011b"
                                        },
                                        "description": {
                                            "en": "We will tailor targeted performance campaign for your offer on Facebook, Google AdWords or Sklik. The bigger the budget, the more visitors will see your offer.",
                                            "cs": "P\u0159iprav\u00edme pro va\u0161i nab\u00eddku c\u00edlenou v\u00fdkonnostn\u00ed kampa\u0148 na Facebooku, Google AdWords \u010di Skliku. \u010c\u00edm v\u011bt\u0161\u00ed nastav\u00edte rozpo\u010det, t\u00edm v\u00edce p\u0159ivedeme na nab\u00eddku n\u00e1v\u0161t\u011bvn\u00edk\u016f."
                                        },
                                        "fixed_price": [],
                                        "minimal_price": {
                                            "CZK": 2000,
                                            "EUR": 100
                                        },
                                        "maximal_price": {
                                            "CZK": 10000,
                                            "EUR": 200
                                        },
                                        "step_price": {
                                            "CZK": 1000,
                                            "EUR": 10
                                        },
                                        "default_price": {
                                            "CZK": 5000,
                                            "EUR": 150
                                        }
                                    }
                                }
                            }
                        },
                        {
                            "id": 16,
                            "amount": 1,
                            "_links": {
                                "self": {
                                    "href": "OrderItems:read"
                                }
                            },
                            "_embedded": {
                                "product": {
                                    "id": 2,
                                    "_links": {
                                        "self": {
                                            "href": "\/api\/products\/2"
                                        }
                                    },
                                    "_embedded": {
                                        "title": {
                                            "en": "Copywriting",
                                            "cs": "Copywriting"
                                        },
                                        "short_description": {
                                            "en": "We will improve your offer text",
                                            "cs": "Vylep\u0161\u00edme text Va\u0161\u00ed nab\u00eddky"
                                        },
                                        "description": {
                                            "en": "We will help you write your offer texts as interesting as possible, so its visited by as many users as possible. Because we know how to write a highly visited offer.",
                                            "cs": "Pom\u016f\u017eeme v\u00e1m napsat va\u0161i nab\u00eddku co nejv\u00edce zajmav\u011b tak, aby p\u0159il\u00e1kala co nejv\u011bt\u0161\u00ed po\u010det z\u00e1jemc\u016f, kte\u0159\u00ed nab\u00eddku uvid\u00ed. Proto\u017ee v\u00edme, jak napsat nab\u00eddku, na kterou se lid\u00e9 hl\u00e1s\u00ed."
                                        },
                                        "fixed_price": {
                                            "CZK": 749,
                                            "EUR": 20
                                        },
                                        "minimal_price": [],
                                        "maximal_price": [],
                                        "step_price": [],
                                        "default_price": []
                                    }
                                }
                            }
                        }
                    ],
                    "job_offer": {
                        "id": 1,
                        "created": "2016-02-20T20:12:38+0100",
                        "_links": {
                            "self": {
                                "href": "\/api\/job-offers\/1"
                            },
                            "company": {
                                "href": "\/api\/companies\/1"
                            },
                            "job": {
                                "href": "\/api\/jobs\/1"
                            }
                        },
                        "_embedded": {
                            "title": [],
                            "description": [],
                            "state": "awaiting-payment",
                            "state_category": "category-waiting",
                            "locations": [],
                            "new_application_mails": ["matej@example.com","filip@example.com"],
                            "job_offer_budgets": [
                                {
                                    "id": 10,
                                    "price_per_c_v": 400,
                                    "total_budget": 4000,
                                    "_links": {
                                        "self": {
                                            "href": "\/api\/job-offer-budgets\/10"
                                        },
                                        "currency": {
                                            "href": "\/api\/currencies\/CZK"
                                        }
                                    },
                                    "_embedded": {
                                        "currency": {
                                            "id": "CZK",
                                            "_links": {
                                                "self": {
                                                    "href": "\/api\/currencies\/CZK"
                                                }
                                            },
                                            "_embedded": {
                                                "title": []
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        }

## Order [/api/orders/{id}]

+ Attributes
    + id (number, required) - ID of the Order
    + created (string, required) - When the Order was created
    + credits_amount (number, optional) - Credits amount
    + credits_bonus (number, optional) - Credits bonus
    + sum (number, required) - Sum of the Order
    + embedded.items (array, optional) - Array of OrderItems for the Order
    + embedded.job_offer (object, optional) - JobOffer to which the Order belongs
    + embedded.job_offer_budget (object, optional) - JobOfferBudget of the Order
    
### Retrieve an Order [GET]

Retrieves an Order with given ID.

+ Response 200 (application/hal+json)

        {
            "id": 1,
            "created": "2016-02-20T20:12:43+0100",
            "credits_amount": 15000,
            "credits_bonus": 150,
            "sum": 15000,
            "_links": {
                "self": {
                    "href": "\/api\/orders\/1"
                }
            },
            "_embedded": {
                "items": [
                    {
                        "id": 15,
                        "amount": 5000,
                        "_links": {
                            "self": {
                                "href": "OrderItems:read"
                            }
                        },
                        "_embedded": {
                            "product": {
                                "id": 1,
                                "price_type": "variable",
                                "_links": {
                                    "self": {
                                        "href": "\/api\/products\/1"
                                    }
                                },
                                "_embedded": {
                                    "title": {
                                        "en": "PPC Campaign",
                                        "cs": "PPC Kampa\u0148"
                                    },
                                    "short_description": {
                                        "en": "We will bring more visitors to your offer by targeted campaign",
                                        "cs": "P\u0159ivedeme v\u00edce n\u00e1v\u0161t\u011bvn\u00edk\u016f na va\u0161\u00ed nab\u00eddku pomoc\u00ed c\u00edlen\u00e9 kampan\u011b"
                                    },
                                    "description": {
                                        "en": "We will tailor targeted performance campaign for your offer on Facebook, Google AdWords or Sklik. The bigger the budget, the more visitors will see your offer.",
                                        "cs": "P\u0159iprav\u00edme pro va\u0161i nab\u00eddku c\u00edlenou v\u00fdkonnostn\u00ed kampa\u0148 na Facebooku, Google AdWords \u010di Skliku. \u010c\u00edm v\u011bt\u0161\u00ed nastav\u00edte rozpo\u010det, t\u00edm v\u00edce p\u0159ivedeme na nab\u00eddku n\u00e1v\u0161t\u011bvn\u00edk\u016f."
                                    },
                                    "minimal_price": {
                                        "CZK": 2000,
                                        "EUR": 100
                                    },
                                    "maximal_price": {
                                        "CZK": 10000,
                                        "EUR": 200
                                    },
                                    "step_price": {
                                        "CZK": 1000,
                                        "EUR": 10
                                    },
                                    "default_price": {
                                        "CZK": 5000,
                                        "EUR": 150
                                    }
                                }
                            }
                        }
                    },
                    {
                        "id": 16,
                        "amount": 1,
                        "_links": {
                            "self": {
                                "href": "OrderItems:read"
                            }
                        },
                        "_embedded": {
                            "product": {
                                "id": 2,
                                "price_type": "fixed",
                                "_links": {
                                    "self": {
                                        "href": "\/api\/products\/2"
                                    }
                                },
                                "_embedded": {
                                    "title": {
                                        "en": "Copywriting",
                                        "cs": "Copywriting"
                                    },
                                    "short_description": {
                                        "en": "We will improve your offer text",
                                        "cs": "Vylep\u0161\u00edme text Va\u0161\u00ed nab\u00eddky"
                                    },
                                    "description": {
                                        "en": "We will help you write your offer texts as interesting as possible, so its visited by as many users as possible. Because we know how to write a highly visited offer.",
                                        "cs": "Pom\u016f\u017eeme v\u00e1m napsat va\u0161i nab\u00eddku co nejv\u00edce zajmav\u011b tak, aby p\u0159il\u00e1kala co nejv\u011bt\u0161\u00ed po\u010det z\u00e1jemc\u016f, kte\u0159\u00ed nab\u00eddku uvid\u00ed. Proto\u017ee v\u00edme, jak napsat nab\u00eddku, na kterou se lid\u00e9 hl\u00e1s\u00ed."
                                    },
                                    "fixed_price": {
                                        "CZK": 749,
                                        "EUR": 20
                                    }
                                }
                            }
                        }
                    },
                    {
                        "id": 18,
                        "amount": 1,
                        "_links": {
                            "self": {
                                "href": "OrderItems:read"
                            }
                        },
                        "_embedded": {
                            "product": {
                                "id": 3,
                                "price_type": "individual",
                                "_links": {
                                    "self": {
                                        "href": "\/api\/products\/3"
                                    }
                                },
                                "_embedded": {
                                  "title": {
                                    "cs": "Testování",
                                    "en": "Testing"
                                  },
                                  "short_description": {
                                    "cs": "Otestujeme motivaci, kompetence a znalosti vašich kandidátů (Testování)",
                                    "en": "We will test motivation, competence, knowledge of yout candidates (Testing)"
                                  },
                                  "description": {
                                    "cs": "Na základě vaší pozice individuálně sestavíme vhodnou sadu testů, která vám pomůže zjistit o kandidátech co nejvíce ještě než je potkáte osobně. Pro nastavení a bližší informace vás budeme obratem kontaktovat.",
                                    "en": "Na základě vaší pozice individuálně sestavíme vhodnou sadu testů, která vám pomůže zjistit o kandidátech co nejvíce ještě než je potkáte osobně. Pro nastavení a bližší informace vás budeme obratem kontaktovat."
                                  }
                                }
                            }
                        }
                    }
                ],
                "job_offer": {
                    "id": 1,
                    "created": "2016-02-20T20:12:38+0100",
                    "_links": {
                        "self": {
                            "href": "\/api\/job-offers\/1"
                        },
                        "company": {
                            "href": "\/api\/companies\/1"
                        },
                        "job": {
                            "href": "\/api\/jobs\/1"
                        }
                    },
                    "_embedded": {
                        "title": [],
                        "description": [],
                        "state": "awaiting-payment",
                        "state_category": "category-waiting",
                        "locations": [],
                        "new_application_mails": ["matej@example.com","filip@example.com"],
                        "current_total_budget": 10000,
                        "current_remaining_budget": 8000,
                        "current_price_per_c_v": 400,
                        "job_offer_budgets": [
                            {
                                "id": 10,
                                "price_per_c_v": 400,
                                "total_budget": 4000,
                                "_links": {
                                    "self": {
                                        "href": "\/api\/job-offer-budgets\/10"
                                    },
                                    "currency": {
                                        "href": "\/api\/currencies\/CZK"
                                    }
                                },
                                "_embedded": {
                                    "currency": {
                                        "id": "CZK",
                                        "_links": {
                                            "self": {
                                                "href": "\/api\/currencies\/CZK"
                                            }
                                        },
                                        "_embedded": {
                                            "title": []
                                        }
                                    }
                                }
                            }
                        ],
                        "current_job_offer_budget": {
                            "id": 10,
                            "price_per_c_v": 400,
                            "total_budget": 4000,
                            "_links": {
                                "self": {
                                    "href": "\/api\/job-offer-budgets\/10"
                                },
                                "currency": {
                                    "href": "\/api\/currencies\/CZK"
                                }
                            },
                            "_embedded": {
                                "currency": {
                                    "id": "CZK",
                                    "_links": {
                                        "self": {
                                            "href": "\/api\/currencies\/CZK"
                                        }
                                    },
                                    "_embedded": {
                                        "title": []
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

### Update Order [PUT]

Updates Order with given ID.
**Note:** You cannot change the job offer or items, but you can add credits.

+ Request (application/json)

    + Attributes
        + credits_amount (number, optional) - Credits amount.
        + currency (string, optional) - Currency fot the credits, required if credits_amount is present.
        + items (array[OrderItem], optional) - List of OrderItems for the Order, each must contain ID of the Product and amount of the Product
        + budget (JobOfferBudget, optional) - JobOfferBudget, requires "price_per_c_v", "total_budget" and "currency".

    + Body

            {
                "credits_amount": 25000,
                "currency": "CZK",
                "items": [
                    {"product": 1, "amount": 5000},
                    {"product": 2, "amount": 1}
                ],
                "budget": {
                    "price_per_c_v": 400,
                    "total_budget": 4000,
                    "currency": "CZK"
                }
            }

+ Response 200 (application/hal+json)

        {
            "ok": true,
            "updated": {
                "id": 1,
                "created": "2016-02-20T20:12:43+0100",
                "credits_amount": 25000,
                "credits_bonus": 250,
                "sum": 15000,
                "_links": {
                    "self": {
                        "href": "\/api\/orders\/1"
                    }
                },
                "_embedded": {
                    "items": [
                        {
                            "id": 15,
                            "amount": 5000,
                            "_links": {
                                "self": {
                                    "href": "OrderItems:read"
                                }
                            },
                            "_embedded": {
                                "product": {
                                    "id": 1,
                                    "_links": {
                                        "self": {
                                            "href": "\/api\/products\/1"
                                        }
                                    },
                                    "_embedded": {
                                        "title": {
                                            "en": "PPC Campaign",
                                            "cs": "PPC Kampa\u0148"
                                        },
                                        "short_description": {
                                            "en": "We will bring more visitors to your offer by targeted campaign",
                                            "cs": "P\u0159ivedeme v\u00edce n\u00e1v\u0161t\u011bvn\u00edk\u016f na va\u0161\u00ed nab\u00eddku pomoc\u00ed c\u00edlen\u00e9 kampan\u011b"
                                        },
                                        "description": {
                                            "en": "We will tailor targeted performance campaign for your offer on Facebook, Google AdWords or Sklik. The bigger the budget, the more visitors will see your offer.",
                                            "cs": "P\u0159iprav\u00edme pro va\u0161i nab\u00eddku c\u00edlenou v\u00fdkonnostn\u00ed kampa\u0148 na Facebooku, Google AdWords \u010di Skliku. \u010c\u00edm v\u011bt\u0161\u00ed nastav\u00edte rozpo\u010det, t\u00edm v\u00edce p\u0159ivedeme na nab\u00eddku n\u00e1v\u0161t\u011bvn\u00edk\u016f."
                                        },
                                        "fixed_price": [],
                                        "minimal_price": {
                                            "CZK": 2000,
                                            "EUR": 100
                                        },
                                        "maximal_price": {
                                            "CZK": 10000,
                                            "EUR": 200
                                        },
                                        "step_price": {
                                            "CZK": 1000,
                                            "EUR": 10
                                        },
                                        "default_price": {
                                            "CZK": 5000,
                                            "EUR": 150
                                        }
                                    }
                                }
                            }
                        },
                        {
                            "id": 16,
                            "amount": 1,
                            "_links": {
                                "self": {
                                    "href": "OrderItems:read"
                                }
                            },
                            "_embedded": {
                                "product": {
                                    "id": 2,
                                    "_links": {
                                        "self": {
                                            "href": "\/api\/products\/2"
                                        }
                                    },
                                    "_embedded": {
                                        "title": {
                                            "en": "Copywriting",
                                            "cs": "Copywriting"
                                        },
                                        "short_description": {
                                            "en": "We will improve your offer text",
                                            "cs": "Vylep\u0161\u00edme text Va\u0161\u00ed nab\u00eddky"
                                        },
                                        "description": {
                                            "en": "We will help you write your offer texts as interesting as possible, so its visited by as many users as possible. Because we know how to write a highly visited offer.",
                                            "cs": "Pom\u016f\u017eeme v\u00e1m napsat va\u0161i nab\u00eddku co nejv\u00edce zajmav\u011b tak, aby p\u0159il\u00e1kala co nejv\u011bt\u0161\u00ed po\u010det z\u00e1jemc\u016f, kte\u0159\u00ed nab\u00eddku uvid\u00ed. Proto\u017ee v\u00edme, jak napsat nab\u00eddku, na kterou se lid\u00e9 hl\u00e1s\u00ed."
                                        },
                                        "fixed_price": {
                                            "CZK": 749,
                                            "EUR": 20
                                        },
                                        "minimal_price": [],
                                        "maximal_price": [],
                                        "step_price": [],
                                        "default_price": []
                                    }
                                }
                            }
                        }
                    ],
                    "job_offer": {
                        "id": 1,
                        "created": "2016-02-20T20:12:38+0100",
                        "_links": {
                            "self": {
                                "href": "\/api\/job-offers\/1"
                            },
                            "company": {
                                "href": "\/api\/companies\/1"
                            },
                            "job": {
                                "href": "\/api\/jobs\/1"
                            }
                        },
                        "_embedded": {
                            "title": [],
                            "description": [],
                            "state": "awaiting-payment",
                            "state_category": "category-waiting",
                            "locations": [],
                            "new_application_mails": ["matej@example.com","filip@example.com"],
                            "job_offer_budgets": [
                                {
                                    "id": 10,
                                    "price_per_c_v": 400,
                                    "total_budget": 4000,
                                    "_links": {
                                        "self": {
                                            "href": "\/api\/job-offer-budgets\/10"
                                        },
                                        "currency": {
                                            "href": "\/api\/currencies\/CZK"
                                        }
                                    },
                                    "_embedded": {
                                        "currency": {
                                            "id": "CZK",
                                            "_links": {
                                                "self": {
                                                    "href": "\/api\/currencies\/CZK"
                                                }
                                            },
                                            "_embedded": {
                                                "title": []
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        }

### Delete Order [DELETE]

Deletes Order with given ID.

+ Response 200 (application/hal+json)

        {
            "ok": true
        }

# Group Products

## Products Collection [/api/products?limit={limit}&page={page}&sort={sort}]

+ Parameters
    + limit (number, optional) - Limits number of Tests returned in the request
    + page (number, optional) - Distance from beginning of the array of available Tests
    + sort (string, optional) - Sorts the result in the given order. The format for sort is "column+ASC,column+DESC"

### List Products [GET]

+ Response 200 (application/hal+json)

        {
            "_embedded": {
                "products": [
                    {
                        "id": 1,
                        "price_type": "variable",
                        "_links": {
                            "self": {
                                "href": "\/api\/products\/1"
                            }
                        },
                        "_embedded": {
                            "title": {
                                "cs": "PPC Kampa\u0148",
                                "en": "PPC Campaign"
                            },
                            "short_description": {
                                "cs": "P\u0159ivedeme v\u00edce n\u00e1v\u0161t\u011bvn\u00edk\u016f na va\u0161\u00ed nab\u00eddku pomoc\u00ed c\u00edlen\u00e9 kampan\u011b (PPC)",
                                "en": "We will bring more visitors to your offer by targeted campaign (PPC)"
                            },
                            "description": {
                                "cs": "P\u0159iprav\u00edme pro va\u0161i nab\u00eddku c\u00edlenou v\u00fdkonnostn\u00ed kampa\u0148 na Facebooku, Google AdWords \u010di Skliku. \u010c\u00edm v\u011bt\u0161\u00ed nastav\u00edte rozpo\u010det, t\u00edm v\u00edce p\u0159ivedeme na nab\u00eddku n\u00e1v\u0161t\u011bvn\u00edk\u016f.",
                                "en": "We will tailor targeted performance campaign for your offer on Facebook, Google AdWords or Sklik. The bigger the budget, the more visitors will see your offer."
                            },
                            "minimal_price": {
                                "CZK": 2000,
                                "EUR": 100
                            },
                            "maximal_price": {
                                "CZK": 50000,
                                "EUR": 200
                            },
                            "step_price": {
                                "CZK": 1000,
                                "EUR": 10
                            },
                            "default_price": {
                                "CZK": 5000,
                                "EUR": 150
                            }
                        }
                    },
                    {
                        "id": 2,
                        "price_type": "fixed",
                        "_links": {
                            "self": {
                                "href": "\/api\/products\/2"
                            }
                        },
                        "_embedded": {
                            "title": {
                                "cs": "Copywriting",
                                "en": "Copywriting"
                            },
                            "short_description": {
                                "cs": "Vylep\u0161\u00edme text Va\u0161\u00ed nab\u00eddky",
                                "en": "We will improve your offer text"
                            },
                            "description": {
                                "cs": "Pom\u016f\u017eeme v\u00e1m napsat va\u0161i nab\u00eddku co nejv\u00edce zajmav\u011b tak, aby p\u0159il\u00e1kala co nejv\u011bt\u0161\u00ed po\u010det z\u00e1jemc\u016f, kte\u0159\u00ed nab\u00eddku uvid\u00ed. Proto\u017ee v\u00edme, jak napsat nab\u00eddku, na kterou se lid\u00e9 hl\u00e1s\u00ed.",
                                "en": "We will help you write your offer texts as interesting as possible, so its visited by as many users as possible. Because we know how to write a highly visited offer."
                            },
                            "fixed_price": {
                                "CZK": 749,
                                "EUR": 20
                            }
                        }
                    },
                    {
                        "id": 3,
                        "price_type": "individual",
                        "_links": {
                            "self": {
                                "href": "\/api\/products\/3"
                            }
                        },
                        "_embedded": {
                            "title": {
                                "cs": "Testování",
                                "en": "Testing"
                            },
                            "short_description": {
                                "cs": "Otestujeme motivaci, kompetence a znalosti vašich kandidátů (Testování)",
                                "en": "We will test motivation, competence, knowledge of yout candidates (Testing)"
                            },
                            "description": {
                                "cs": "Na základě vaší pozice individuálně sestavíme vhodnou sadu testů, která vám pomůže zjistit o kandidátech co nejvíce ještě než je potkáte osobně. Pro nastavení a bližší informace vás budeme obratem kontaktovat.",
                                "en": "Na základě vaší pozice individuálně sestavíme vhodnou sadu testů, která vám pomůže zjistit o kandidátech co nejvíce ještě než je potkáte osobně. Pro nastavení a bližší informace vás budeme obratem kontaktovat."
                            }
                        }
                    }
                ]
            }
        }

### Create a Product [POST]

Creates a Product with given parameters.

+ Request (application/json)

    + Attributes
        + price_type (string, required) - Type of Product price. Can be 'fixed', 'variable' or 'individual'.
        + title (object, required) - Localized title of the Product
        + short_description (object, required) - Localized short description of the Product
        + description (object, required) - Localized description of the Product
        + fixed_price (object, optional) - Fixed price for the Product in different currencies
        + start_price (object, optional) - Fixed price for the Product in different currencies
        + step_price (object, optional) - Step price for the Product in different currencies
        + default_price (object, optional) - Default price for the Product in different currencies
        + maximal_price (object, optional) - Maximal price for the Product in different currencies
        + minimal_price (object, optional) - Minimal price for the Product in different currencies

    + Body

            {   
                "price_type": "variable",
                "title": {
                    "cs": "PPC Kampa\u0148",
                    "en": "PPC Campaign"
                },
                "short_description": {
                    "cs": "P\u0159ivedeme v\u00edce n\u00e1v\u0161t\u011bvn\u00edk\u016f na va\u0161\u00ed nab\u00eddku pomoc\u00ed c\u00edlen\u00e9 kampan\u011b (PPC)",
                    "en": "We will bring more visitors to your offer by targeted campaign (PPC)"
                },
                "description": {
                    "cs": "P\u0159iprav\u00edme pro va\u0161i nab\u00eddku c\u00edlenou v\u00fdkonnostn\u00ed kampa\u0148 na Facebooku, Google AdWords \u010di Skliku. \u010c\u00edm v\u011bt\u0161\u00ed nastav\u00edte rozpo\u010det, t\u00edm v\u00edce p\u0159ivedeme na nab\u00eddku n\u00e1v\u0161t\u011bvn\u00edk\u016f.",
                    "en": "We will tailor targeted performance campaign for your offer on Facebook, Google AdWords or Sklik. The bigger the budget, the more visitors will see your offer."
                },
                "minimal_price": {
                    "CZK": 2000,
                    "EUR": 100
                },
                "maximal_price": {
                    "CZK": 50000,
                    "EUR": 200
                },
                "step_price": {
                    "CZK": 1000,
                    "EUR": 10
                },
                "default_price": {
                    "CZK": 5000,
                    "EUR": 150
                }
            }

+ Response 201 (application/hal+json)

        {
            "ok": true,
            "inserted": {
                "id": 1,
                "price_type": "variable",
                "_links": {
                    "self": {
                        "href": "\/api\/products\/1"
                    }
                },
                "_embedded": {
                    "title": {
                        "cs": "PPC Kampa\u0148",
                        "en": "PPC Campaign"
                    },
                    "short_description": {
                        "cs": "P\u0159ivedeme v\u00edce n\u00e1v\u0161t\u011bvn\u00edk\u016f na va\u0161\u00ed nab\u00eddku pomoc\u00ed c\u00edlen\u00e9 kampan\u011b (PPC)",
                        "en": "We will bring more visitors to your offer by targeted campaign (PPC)"
                    },
                    "description": {
                        "cs": "P\u0159iprav\u00edme pro va\u0161i nab\u00eddku c\u00edlenou v\u00fdkonnostn\u00ed kampa\u0148 na Facebooku, Google AdWords \u010di Skliku. \u010c\u00edm v\u011bt\u0161\u00ed nastav\u00edte rozpo\u010det, t\u00edm v\u00edce p\u0159ivedeme na nab\u00eddku n\u00e1v\u0161t\u011bvn\u00edk\u016f.",
                        "en": "We will tailor targeted performance campaign for your offer on Facebook, Google AdWords or Sklik. The bigger the budget, the more visitors will see your offer."
                    },
                    "minimal_price": {
                        "CZK": 2000,
                        "EUR": 100
                    },
                    "maximal_price": {
                        "CZK": 50000,
                        "EUR": 200
                    },
                    "step_price": {
                        "CZK": 1000,
                        "EUR": 10
                    },
                    "default_price": {
                        "CZK": 5000,
                        "EUR": 150
                    }
                }
            }
        }

## Product [/api/products/{id}]

    ** Note: Each Product must have either a fixed price, or default, step, maximal and minimal price.

    + Attributes
        + id (number, required) - ID of the Product
        + price_type (string, required) - Type of Product price. Can be 'fixed', 'variable' or 'individual'.
        + embedded.title (object, required) - Localized title of the Product
        + embedded.short_description (object, required) - Localized short description of the Product
        + embedded.description (object, required) - Localized description of the Product
        + embedded.fixed_price (object, optional) - Fixed price for the Product in different currencies
        + embedded.default_price (object, optional) - Default price for the Product in different currencies
        + embedded.step_price (object, optional) - Step price for the Product in different currencies
        + embedded.maximal_price (object, optional) - Maximal price for the Product in different currencies
        + embedded.minimal_price (object, optional) - Minimal price for the Product in different currencies

    + Parameters
        + id (number, required) - ID of the Product

### Retrieve a Product [GET]

Retrieves a Product with given ID.

+ Response 200 (application/hal+json)

        {
            "id": 1,
            "price_type": "variable",
            "_links": {
                "self": {
                    "href": "\/api\/products\/1"
                }
            },
            "_embedded": {
                "title": {
                    "cs": "PPC Kampa\u0148",
                    "en": "PPC Campaign"
                },
                "short_description": {
                    "cs": "P\u0159ivedeme v\u00edce n\u00e1v\u0161t\u011bvn\u00edk\u016f na va\u0161\u00ed nab\u00eddku pomoc\u00ed c\u00edlen\u00e9 kampan\u011b (PPC)",
                    "en": "We will bring more visitors to your offer by targeted campaign (PPC)"
                },
                "description": {
                    "cs": "P\u0159iprav\u00edme pro va\u0161i nab\u00eddku c\u00edlenou v\u00fdkonnostn\u00ed kampa\u0148 na Facebooku, Google AdWords \u010di Skliku. \u010c\u00edm v\u011bt\u0161\u00ed nastav\u00edte rozpo\u010det, t\u00edm v\u00edce p\u0159ivedeme na nab\u00eddku n\u00e1v\u0161t\u011bvn\u00edk\u016f.",
                    "en": "We will tailor targeted performance campaign for your offer on Facebook, Google AdWords or Sklik. The bigger the budget, the more visitors will see your offer."
                },
                "minimal_price": {
                    "CZK": 2000,
                    "EUR": 100
                },
                "maximal_price": {
                    "CZK": 50000,
                    "EUR": 200
                },
                "step_price": {
                    "CZK": 1000,
                    "EUR": 10
                },
                "default_price": {
                    "CZK": 5000,
                    "EUR": 150
                }
            }
        }

### Update a Product [PUT]

Updates a Product with given ID.

+ Request (application/json)

    + Attributes
        + price_type (string, optional) - Type of Product price. Can be 'fixed', 'variable' or 'individual'.
        + title (object, required) - Localized title of the Product
        + short_description (object, required) - Localized short description of the Product
        + description (object, required) - Localized description of the Product
        + fixed_price (object, optional) - Fixed price for the Product in different currencies
        + default_price (object, optional) - Default price for the Product in different currencies
        + step_price (object, optional) - Step price for the Product in different currencies
        + maximal_price (object, optional) - Maximal price for the Product in different currencies
        + minimal_price (object, optional) - Minimal price for the Product in different currencies

    + Body

            {
                "title": {
                    "cs": "PPC Kampaň",
                    "en": "PPC Campaign"
                }
            }

+ Response 200 (application/hal+json)

        {
            "ok": true,
            "price_type": "variable",
            "updated": {
                "id": 1,
                "_links": {
                    "self": {
                        "href": "\/api\/products\/1"
                    }
                },
                "_embedded": {
                    "title": {
                        "cs": "PPC Kampa\u0148",
                        "en": "PPC Campaign"
                    },
                    "short_description": {
                        "cs": "P\u0159ivedeme v\u00edce n\u00e1v\u0161t\u011bvn\u00edk\u016f na va\u0161\u00ed nab\u00eddku pomoc\u00ed c\u00edlen\u00e9 kampan\u011b (PPC)",
                        "en": "We will bring more visitors to your offer by targeted campaign (PPC)"
                    },
                    "description": {
                        "cs": "P\u0159iprav\u00edme pro va\u0161i nab\u00eddku c\u00edlenou v\u00fdkonnostn\u00ed kampa\u0148 na Facebooku, Google AdWords \u010di Skliku. \u010c\u00edm v\u011bt\u0161\u00ed nastav\u00edte rozpo\u010det, t\u00edm v\u00edce p\u0159ivedeme na nab\u00eddku n\u00e1v\u0161t\u011bvn\u00edk\u016f.",
                        "en": "We will tailor targeted performance campaign for your offer on Facebook, Google AdWords or Sklik. The bigger the budget, the more visitors will see your offer."
                    },
                    "minimal_price": {
                        "CZK": 2000,
                        "EUR": 100
                    },
                    "maximal_price": {
                        "CZK": 50000,
                        "EUR": 200
                    },
                    "step_price": {
                        "CZK": 1000,
                        "EUR": 10
                    },
                    "default_price": {
                        "CZK": 5000,
                        "EUR": 150
                    }
                }
            }
        }

### Soft delete a Product [DELETE]

Softly deletes a Product with given ID.

+ Response 200 (application/hal+json)

        {
            "ok": true
        }


# Data Structures

## ContactPerson (object)

+ Attributes
    + name (string, required) - Name of the Person
    + email (string, required) - Email of the Person
    + phone (string, required) - Phone of the Person

## OrderItem (object)

+ Attributes
    + product (number, required) - ID of the Product
    + amount (number, required) - amount of the Product

## JobOfferBudget (object)

+ Attributes
    + price_per_c_v (number, required) - Price per one CV
    + total_budget (number, required) - Total budget
    + currency (string, required) - ID of the currency for the budgets